{"version":3,"sources":["../assets/scripts/discovery.js"],"names":["$","jQuery","DiscoveryController","discoveryObj","controller","queue","labels","before","after","enqueue","controllerStateChange","CriteriaSelectionController","facets","PaginationController","HTMLPaginationController","paginator","nextbtn","find","prevbtn","pagebtns","pageIndicator","html","currentPageIndicator","totalResultsIndicator","currentRangeIndicator","itemLimit","data","currentPage","initUI","resultsInfo","getResultInfo","nextPage","totalPages","viewPage","prevPage","page","attr","self","hide","length","unbind","bind","event","preventDefault","submit","show","previousPage","i","append","replaceAll","each","totalResults","start","end","push","op","values","HTMLSearchBox","HTMLCriteriaController","maxlistitems","setDefaultState","removeClass","markControlForInclusion","item","siblings","addClass","val","element","setAttribute","closest","resetControllers","facet","undefined","initfnc","ucfirst","itemcnt","showmore","toggleClass","removeAttr","hasAttribute","morebtn","fewerbtn","css","fadeIn","fadeOut","animate","scrollTop","offset","top","input","keyCode","which","uiType","labelPosition","label","plural","labelPlural","replace","split","buildLabels","DiscoveryView","items","HTMLView","view","stage","titleStage","templates","parseTemplates","titleLabels","twrapper","remove","template","processed","match","forEach","token","key","processTokens","book_capsule","displayTitle","titleStageData","position","type","j","span","viewTitleTermClass","concatToSentence","title","viewTitlePrefix","viewTitleLabel","viewTitleNone","trim","ECommonsOntarioCriteriaController","ECommonsOntarioHTMLView","discoveryObject","DiscoveryDataHandler","dbURI","dbmethod","dburl","paths","build_paths","query","resultsComplete","itemComplete","XHROpts","resetXHROpts","results","resultItem","resultItemError","expandedResults","parameter","value","operator","Parameter","term","limit","async","method","error","xhrError","Deferred","opt","prepareQuery","setXHROpt","makeURL","filtered_items","path","retrieve","when","done","Math","ceil","parseInt","id","ajax","extend","success","textStatus","jqXHR","xhrResultsHandler","processResults","resolve","xhr","ajaxOptions","thrownError","console","log","list","item_metadata","find_by_metadata","filtered_collections","collection","DSpaceDataHandler","resetQueryParameters","expansion","filters","fields","name","setQueryParameter","updateResultsInfo","subject","byline","metadata","md","prop","join","uuid","serializeDisplayString","subjects","output","replaceLast","date","timestamp","now","Date","toUTCString","from","setAdditionalParameter","collectionID","expansionValue","includes","filter","expandQuery","retrieveExpandedResults","url","prepareItemQuery","opts","expand","networkInfo","errorData","options","item_bitstreams","bitstreams","item_policy","content","schemas","field","Discovery","dataOpQueue","controllers","inboundState","resetDataOps","concat","execute","setItemLimit","map","setDataOp","retrieveData","getResults","updateTitleLabels","displayResults","updateControllers","updateController","reset","resetDataParameters","apply","executeQuery","setItems","setTitleLabels","displayQueryResults","ECommonsOntarioDiscovery","vars","registerController","getUrlParameter","decodeURIComponent","criteriaController","searchElement","includeMetaData","CatalogueItemView","itemObj","HTMLItemView","initDisplay","text","author","k","v","authorelement","image_url","bio","subj","cover_url","retrieveLink","format","click","toggle","CatalogueItem","displayItemResults","ECommonsOntarioCatalogueItem","retrieveItem","getItem","String","prototype","charAt","toUpperCase","slice","search","replacement","target","RegExp","index","lastIndexOf","substring","toString","Array","conjunction","sentence","sParam","sPageURL","window","location","sURLVariables","sParameterName"],"mappings":"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","file":"discovery.js","sourcesContent":["/* jshint latedef:nofunc */\n//needed for function hoisting for build \n      \nvar $ = jQuery;\n\n/* !DISCOVERY CONTROLLER CLASS */\n\n// Core Controller Class\n\nclass DiscoveryController {\n  constructor(discoveryObj) {\n    this.discoveryObj = discoveryObj;\n    this.controller = null;\n    this.queue = [];\n    this.labels = {\n      before: [],\n      after: []\n    };\n  }  \n  \n  // To be called when results return from the data handler. Used to update results-dependent control devices such as paginators.\n  \n  updateController() {\n    \n  }\n  \n  // The controller is responsible for adding Data Class operators and values to the this.queue array, using the following form:\n  // { op: 'dataOpName', value: [list,of,op,arguments] }\n  \n  enqueue() {\n    \n  }\n  \n  /*  Audit the controller and build the title labels object. The Discovery class will retrieve all labels and hand them to the \n      View to build the descriptive title. The labels will have the following form:\n      \n      this.labels = {\n      before: [{\n        label: \"label\"\n        plural: \"plural label\"\n        values: []\n      }, {...}  \n      ],\n      after: [{... as above ...}]\n    };\n    \n    Should be called as part of the enqueue process.\n      \n  */\n  \n  buildLabels() {\n    this.labels = {\n      before: [],\n      after: []\n    };\n  }\n  \n  addLabel() {\n    \n  }\n  \n  // Submit enqueues and activates a controller state change in the main Disocvery object. \n  // If you want to manually retrieive values just enqueue the controller (listing its ops)\n  \n  // Reset should reset the controller to its default options.\n  \n  reset() {\n    \n  }\n        \n  submit() {\n    this.enqueue();\n    this.discoveryObj.controllerStateChange();\n  }\n  \n}\n\n// Manages UIs that submit filter criteria.\n\n/* !CRITERIA SELECTION CONTROLLER CLASS */\n\nclass CriteriaSelectionController extends DiscoveryController {\n  constructor(discoveryObj) {\n    super(discoveryObj);\n    this.facets = null;\n  }\n  \n  buildLabels() {\n    super.buildLabels();\n  }\n\n  \n  updateController() {\n    super.updateController();\n  }\n  \n  enqueue() {\n    super.enqueue();\n  }\n  \n  submit() {\n    super.submit();\n  }\n  \n}\n\n/* !PAGINATION CONTROLLER CLASS */\n// Manages Pagination UIs.\n\nclass PaginationController extends DiscoveryController {\n  constructor(discoveryObj) {\n    super(discoveryObj);\n  }\n  \n  updateController() {\n    super.updateController();\n  }\n  \n  initUI() {\n    \n  }\n  \n  enqueue()  {\n    super.enqueue();\n  }\n  \n  submit() {\n    super.submit();\n  }\n}\n\n/* !HTML PAGINATION CONTROLLER CLASS */\n\n// Manages HTML5-Based Pagination UIs\nclass HTMLPaginationController extends PaginationController {\n  constructor(discoveryObj) {\n    super(discoveryObj);\n    \n    // Components\n    this.discoveryObj = discoveryObj;\n    this.paginator = $('[data-controller-paginator]');\n    this.nextbtn = this.paginator.find('[data-controller-next]');\n    this.prevbtn = this.paginator.find('[data-controller-previous]');\n    this.pagebtns = this.paginator.find('[data-controller-pagebtns]');\n    this.pageIndicator = this.pagebtns.html();\n    \n    this.currentPageIndicator = this.paginator.find('[data-controller-current-page]');\n    this.totalResultsIndicator = this.paginator.find('[data-controller-total-results]');\n    this.currentRangeIndicator = this.paginator.find('[data-controller-current-range]');\n    \n    // Settings\n    \n    this.itemLimit = this.paginator.data('controller-item-limit');\n    this.currentPage = this.paginator.data('controller-current-page');\n                    \n    this.initUI();\n  }\n  \n  nextPage() {\n    var resultsInfo = this.discoveryObj.data.getResultInfo();\n    var nextPage = (resultsInfo.currentPage + 1) > resultsInfo.totalPages ? 1 : (resultsInfo.currentPage + 1);\n    this.viewPage(nextPage);\n  }\n  \n  previousPage() {\n    var resultsInfo = this.discoveryObj.data.getResultInfo();\n    var prevPage = (resultsInfo.currentPage - 1) === 0 ? resultsInfo.totalPages : (resultsInfo.currentPage - 1);\n    this.viewPage(prevPage);\n  }\n        \n  viewPage(page) {        \n    var resultsInfo = this.discoveryObj.data.getResultInfo();\n    this.paginator.attr('data-controller-current-page',page);\n  }\n  \n  updateController() {\n    this.initUI();\n  }\n  \n  initUI() {\n    super.initUI();\n    \n    var self = this;\n    \n    var resultsInfo = this.discoveryObj.data.getResultInfo();\n    \n    // Hide pagination until there are results to display.\n    \n    this.paginator.hide();\n    \n                    \n    // Resent click event handlers and hide control elements.        \n    \n    if (this.nextbtn.length > 0) {\n      this.nextbtn.unbind('click').hide();\n      \n      this.nextbtn.bind('click',function(event){\n        event.preventDefault();\n        self.nextPage();\n        self.submit();\n      });\n      \n      if (resultsInfo.currentPage < resultsInfo.totalPages) {\n        this.nextbtn.show();\n      } \n    }\n    \n    if(this.prevbtn.length > 0) {\n      this.prevbtn.unbind('click').hide();\n      \n      this.prevbtn.bind('click',function(event){\n        event.preventDefault();\n        self.previousPage();\n        self.submit();\n      });\n      \n      if (resultsInfo.currentPage > 1) {\n        this.prevbtn.show();\n      }   \n    \n    }\n    \n    this.pagebtns.hide();\n    this.pagebtns.html('');\n      \n    if (this.paginator.length > 0) {\n    \n      // Build paginators\n      \n      if (resultsInfo.totalPages > 0) {\n        for (var i=1;i<resultsInfo.totalPages+1;i++) {\n          this.pagebtns.append(this.pageIndicator.replaceAll('%%',i)); \n        }\n                    \n        this.pagebtns.find('[data-controller-pagebtn]').each(function(){\n          $(this).bind('click',function(event) {\n            event.preventDefault();\n            self.viewPage($(this).attr('data-pageref'));\n            self.submit();\n          });\n        });\n        \n        this.pagebtns.show();\n\n        \n        if (this.currentPageIndicator.length > 0) {\n          this.currentPageIndicator.html(resultsInfo.currentPage);\n        }\n        \n        if (this.totalResultsIndicator.length > 0) {\n          this.totalResultsIndicator.html(resultsInfo.totalResults);\n        }\n        \n        if (this.currentRangeIndicator.length > 0) {\n          var start = ((resultsInfo.currentPage-1) * resultsInfo.itemLimit) + 1;\n          var end = ((resultsInfo.currentPage-1) * resultsInfo.itemLimit) + resultsInfo.itemLimit;\n          end = end > resultsInfo.totalResults ? resultsInfo.totalResults : end;\n          this.currentRangeIndicator.html(start + \" – \" + end);\n        }\n        \n        if (resultsInfo.totalResults !== 0) {\n          this.paginator.show();\n        }            \n      }\n    }        \n  }\n  \n  enqueue() {\n    this.queue = [];\n    this.queue.push(\n      {\n        op: 'setItemLimit',\n        values: [this.paginator.attr('data-controller-item-limit'),this.paginator.attr('data-controller-current-page')]\n      });          \n  }\n  \n  \n}\n\n/* !HTML SEARCH BOX CLASS */\n// Manages standalone Search Box UIs\n\nclass HTMLSearchBox extends CriteriaSelectionController {\n  constructor(discoveryObj) {\n    super(discoveryObj);\n  }\n}\n    \n/* !HTMLUI CONTROLLER */\n    \nclass HTMLCriteriaController extends CriteriaSelectionController {\n  constructor(discoveryObj) {\n    super(discoveryObj);\n    this.controller = $(\"[data-widget='discovery-controller']\");\n    this.facets = this.controller.find(\"[data-facet]\");\n    \n    // Settings\n    this.maxlistitems = 10;\n    \n    // Init\n    this.setDefaultState();\n    this.initUI();\n  }\n  \n  // Finds any item marked 'data-default-value' and sets it for inclusion in the queue.\n  \n  setDefaultState() {\n    var self = this;\n    this.controller.find('.selected').removeClass('selected');\n    \n    this.controller.find('[data-default-value]').each(function(){\n      self.markControlForInclusion($(this));\n    });\n    \n              \n    // Mark generic (*) value as selected if no other facet items are.\n    \n    this.facets.find('li').each(function(){\n      var item = $(this);\n      if(item.data('value') === '*' && item.siblings('[data-selected]').length === 0) {\n        item.addClass('selected');\n      }\n    });\n    \n    // Clear all user input forms\n    \n    this.facets.find('[data-user-input]').val('');\n    \n    \n  }\n  \n  // Accepts a jQuery object. Marks it for inclusion in the controller queue.\n  \n  markControlForInclusion(element) {\n    element[0].setAttribute('data-selected','');\n    element.closest('[data-facet]')[0].setAttribute('data-enqueue','');\n    element.addClass('selected');\n  }\n  \n  initUI() {\n    var self = this;\n    \n    // Submit Button\n    \n    this.controller.find('[data-submit]').bind('click',function(event){\n      event.preventDefault();\n      self.submit();\n    });\n    \n    // Reset Button\n    \n    this.controller.find('[data-reset]').bind('click',function(event){\n      event.preventDefault();\n      self.discoveryObj.resetControllers();\n      self.submit();\n    });\n    \n    /* \n       Allows us to define widget initialization methods based on the ui-type.\n       Methods are in the form init[ui-type], with ui-type capitalized.\n       \n       Initialization functions are responsible for the following:\n       - Binding the appropriate change event (e.g. a click for a list or change for a selection). \n       - Adding its parent facet to the query queue by assigning it a 'data-enqueue' attribute.\n       - Adding a 'data-selected' attribute to any selected item.\n       - Resetting the facet if a user selects an “all” or “none” value, indicated in the controller by a '*' data-value.\n       - Firing the controller’s submit method.\n       - Performing any UX event modifications (such as preventing default link behaviour on link lists).\n    */\n    \n    this.facets.each(function() {\n      var facet = $(this);\n      if (typeof facet.data('ui-type') === undefined) { return; }\n      var initfnc = \"init\" + facet.data('ui-type').ucfirst();\n      if (typeof self[initfnc] !== 'function') { return; }\n      self[initfnc](facet,self);\n    });\n    \n    \n  }\n              \n  initList(facet,self) {\n    var itemcnt = 0;\n    var showmore = false;\n    facet.find('[data-user-input-wrapper]').find('li > a').each(function() {\n      var item = $(this).closest('li');\n                \n      $(this).bind('click',function(event) {\n        event.preventDefault();\n        item.toggleClass('selected');\n        if (item.data('value') === '*') { // Handles neutral state selection.\n          facet.removeAttr('data-enqueue');\n          item.siblings('li').removeAttr('data-selected');\n        } else if (item[0].hasAttribute('data-selected') && item.data('value') !== '*') { // Handles deselection. Checks to see if siblings are selected and sets to neutral if not.\n          item.removeAttr('data-selected');              \n          if (item.siblings('[data-selected]').length === 0) {\n            facet.removeAttr('data-enqueue');\n            item.siblings().each(function(){\n              if($(this).data('value')==='*') {\n                $(this).addClass('selected');\n              }\n            });\n          }\n        } else { // Handles selection.\n          facet[0].setAttribute('data-enqueue',''); // Use native JS to set boolean attribute\n          item[0].setAttribute('data-selected',''); \n        }\n        \n        // Facet only allows a single value\n                    \n        if(typeof facet.data('ui-restriction') !== \"undefined\" && facet.data('ui-restriction') === 'single') {\n          item.siblings('li').each(function(){\n            $(this).removeAttr('data-selected');\n            if ($(this).data('value') !== '*') {\n              $(this).removeClass('selected');\n            }\n          });\n        }\n        \n        self.submit();\n      });\n      \n      if (itemcnt++ > self.maxlistitems) {\n        $(this).closest('li').hide();\n        showmore = true;\n      }\n    });  \n    \n    // UI Animation for showing and hiding long item lists\n    \n    if (showmore === true) {\n                \n      var morebtn = $(\"<p data-controller-ui-showmore><a title='Show all items'>Show all items</a><p>\");\n      var fewerbtn = $(\"<p data-controller-ui-showfewer><a title='Show fewer items'>Show fewer items</a><p>\");\n      \n      morebtn\n        .css('cursor','pointer')\n        .addClass('showmore')\n        .bind('click',function(event) {\n          event.preventDefault();\n          facet.find('li:hidden').each(function(){\n            $(this).fadeIn(200);\n          });\n          $(this).hide();\n          facet.find('[data-controller-ui-showfewer]').fadeIn(200);\n        });\n        \n      fewerbtn\n        .css('cursor','pointer')\n        .css('display','none')\n        .addClass('showmore')\n        .bind('click',function(event) {\n          event.preventDefault();\n          var i=0;\n          facet.find('li').each(function(){\n            if (i++ > self.maxlistitems) {\n              $(this).fadeOut(200);\n            }\n          });\n          $(this).hide();\n          facet.find('[data-controller-ui-showmore]').fadeIn(200);\n          $('html, body').animate({\n              scrollTop: self.controller.offset().top\n          }, 800);\n        });\n      \n      facet.append([morebtn,fewerbtn]); \n      \n    }      \n  }\n  \n  initTextfield(facet,self) {\n    facet.find('[data-user-input]').each(function() {\n      $(this).bind('keyup',function(event) {\n        var input = $(this);\n        if(input.val().length > 2) { // Don’t submit if there are less than three characters in the text field\n          facet[0].setAttribute('data-enqueue',''); // Use native JS to set boolean attribute\n          input[0].setAttribute('data-selected','');\n          input.attr('data-value',input.val());\n          self.submit();\n        } else {\n          facet.removeAttr('data-enqueue');\n          input.removeAttr('data-selected');\n        }\n      })\n      .bind('keypress', function(event) { // intercepts return character which would otherwise \"submit\" the form\n        if ((event.keyCode ? event.keyCode : event.which) === 13) {\n          self.submit();\n          return false;\n        } else { \n          return true;\n        }\n      });\n    });\n  }   \n  \n  buildLabels() {\n    super.buildLabels(); // Resets labels\n    var self = this;\n    this.controller.find('[data-enqueue]').each(function() {\n      var facet = $(this);\n      var data = facet.data();    \n      var values = [];\n      \n      // TO DO: Create a proper extraction function for each UI type\n      \n      switch(data.uiType) {\n        case 'list':\n          facet.find('[data-selected] > a').each(function() {\n            values.push($(this).html());\n          });\n          break;\n        case 'textfield':\n          facet.find('[data-user-input]').each(function() {\n            values.push($(this).val());\n          });\n          break;            \n      }\n              \n      self.labels[data.labelPosition].push(\n        {\n          label:  typeof data.label !== 'undefined' ? data.label : '',\n          plural: typeof data.labelPlural !== 'undefined' ? data.labelPlural : '',\n          values: values\n        }\n      );\n    });\n  }\n  \n  reset() {\n    this.controller.find('[data-enqueue]').each(function(){\n      $(this).removeAttr('data-enqueue');\n    });\n    \n    this.controller.find('[data-selected]').each(function(){\n      $(this).removeAttr('data-selected');\n    });\n    \n    this.setDefaultState();\n  }\n  \n  /* \n      Adds a list of data retrieval objects to the queue. Data retrieval objects contain a\n      data op (corresponding to a method of the data object) and values corresponding to its\n      arguments.\n  */   \n  \n  enqueue() {\n    var self = this;\n    this.queue = [];\n    this.controller.find('[data-enqueue]').each(function() {\n      var facet = $(this);\n      var values = [];\n      facet.find('[data-selected]').each(function() {\n        self.queue.push(\n          {\n            op: facet.data('op'),\n            values: facet.data('param').replace('%%',$(this).attr('data-value')).split('|')\n          }\n        );\n      });\n      \n    });\n    \n    this.buildLabels();        \n  }\n  \n  submit() {\n    super.submit();\n  }\n  \n  \n}\n\n/* !DISCOVERY VIEW CLASS */\n\nclass DiscoveryView {\n  contructor(discoveryObj) {\n    this.items = [];\n  }\n  \n  setItems(items) {\n    this.items = items;\n    return this;\n  }\n        \n  displayQueryResults() {\n\n  }\n}\n\n\n/* !HTML VIEW CLASS */\n\n\n// Displays results on HTML5 Stage\n\nclass HTMLView extends DiscoveryView {\n  constructor(discoveryObj) {\n    super(discoveryObj);\n    this.view = $('[data-view-results]');\n    this.stage = this.view.find('[data-view-stage]');\n    this.titleStage = this.view.find('[data-view-title-stage]');\n    this.templates = {};\n    this.parseTemplates();  \n    this.titleLabels = {\n      before: [],\n      after: []\n    };     \n  }\n  \n  // Finds templates in the DOM and adds them to the templates object.\n  // Templates are designated in the DOM by a [data-view-template-wrapper] boolean attribute.\n  // This script expects that each wrapper have [data-template-name], which will be used as\n  // an object property. The template block is then removed from the DOM.\n  \n  parseTemplates() {\n    var self = this;\n    var templates = this.view.find('[data-view-templates]');\n    templates.find('[data-view-template-wrapper]').each(function(){\n      var twrapper = $(this);\n      self.templates[twrapper.data('view-template-name')] = twrapper.html();\n    })\n    .remove();\n  }\n  \n  // Tokens are processed as follows:  \n  // %%DataKey%%\n  \n  processTokens(template,item) {\n    var processed = template;\n    template.match(/\\%\\%[^\\%]*\\%\\%/g).forEach(function(token) {\n      var key = token.replaceAll('%%','');\n      processed = processed.replaceAll(token,item.values[key]);\n    });\n    \n    return processed;\n  }\n  \n  setTitleLabels(labels) {\n    this.titleLabels = labels;\n    return this;\n  }\n  \n  \n  displayQueryResults() {\n    var self = this;                \n    self.stage.html('');\n    this.items.forEach(function(item) {\n      self.stage.append(self.processTokens(self.templates.book_capsule,item));\n    });\n    \n    this.displayTitle();\n  }\n  \n  displayTitle() {\n    \n    var titleStageData = this.titleStage.data();\n    \n    var labels = {\n      before: [],\n      after: []\n    };\n            \n    for (var position in this.titleLabels) {\n      for(var i=0;i < this.titleLabels[position].length; i++) {\n        var item = this.titleLabels[position][i];\n        var type = item.values.length > 1 ? \"plural\" : \"label\";\n                    \n        for (var j=0; j < item.values.length; j++) {\n          var span = \"<span class='\" + titleStageData.viewTitleTermClass + \"'>\" + item.values[j] + \"</span>\";\n          item.values[j] = span;\n        }\n        \n        labels[position].push(item[type].replaceAll('%%',item.values.concatToSentence()));\n      }\n    }\n    \n    var title = this.items.length > 0 ?\n        titleStageData.viewTitlePrefix + \" \" + labels.before.concatToSentence() + \" \" + titleStageData.viewTitleLabel + \" \" + labels.after.concatToSentence() :\n        titleStageData.viewTitleNone;        \n    \n    this.titleStage.html(title.trim());\n  }\n}\n\n// Displays controller particular to the ECommonsOntario site\n\nclass ECommonsOntarioCriteriaController extends HTMLCriteriaController {\n  constructor(discoveryObj) {\n    super(discoveryObj);\n  }\n}\n\n// Displays results particular to the ECommonsOntario site\n\n/* !ECO VIEW CLASS */\n\nclass ECommonsOntarioHTMLView extends HTMLView {\n  constructor(discoveryObject) {\n    super(discoveryObject);\n  }\n}\n    \n/* !DISCOVERY DATA HANDLER */\n\nclass DiscoveryDataHandler {\n  constructor(dbURI, dbmethod) {\n    this.dburl = dbmethod + '://' + dbURI;\n    this.paths = this.build_paths();\n    this.query = {};\n    this.resultsComplete = null;\n    this.itemComplete = null;\n    this.XHROpts = this.resetXHROpts();\n    this.results = {};\n    this.itemLimit = 6;\n    this.currentPage = 0;\n    this.totalResults = 0;\n    this.totalPages = 0;\n    this.resultItem = {};\n    this.resultItemError = {};\n    this.expandedResults = {}; // results without limits\n  }\n        \n  resetQueryParameters() {\n    this.query = {};\n  }\n\n  // Placeholder. Will be particualar to database implementation. \n  \n  setQueryParameter(parameter,value,operator='like') {\n    this.query[Parameter] = value;\n    return this;  \n  }\n  \n  // Placeholder. Will be particular to database implementation\n  \n  setSearchTerm(term,operator='matches') {\n    return this;\n  }      \n  // Placeholder. Will be particular to database implementation\n  \n  setDateIssed(value,operator='<') {\n    return this;\n  }\n  \n  // Sets item limits.\n  \n  setItemLimit(limit,page) {\n    var offset = limit * (page - 1);\n    this.itemLimit = limit;\n    this.currentPage = page;\n    return this;\n  }            \n  \n  // A wrapper for the query Parameter\n  \n  getQuery() {\n    return this.query;\n  }\n  \n  // Sets default options for the AJAX call.\n  \n  resetXHROpts() {\n    this.XHROpts = {\n      async: true,\n      method: \"GET\", // default\n      //traditional: true,\n      //crossOrigin: true,\n      error: this.xhrError,\n    };\n    \n    this.resultsComplete= $.Deferred();\n  }\n  \n  // Set AJAX option as per http://api.jquery.com/jquery.ajax/\n  \n  setXHROpt(opt,value) {\n    this.XHROpts[opt] = value;\n    return this;\n  }\n  \n  // Wrapper that returns AJAX options\n  \n  getXHROpts() {\n    return this.XHROpts;\n  }\n    \n  // Performs filtered query\n  \n  executeQuery() {\n    this.resetXHROpts();\n    this.prepareQuery();\n    this\n      .setXHROpt('url',this.makeURL(this.paths.query.filtered_items.path))\n      .setXHROpt('method',this.paths.query.filtered_items.method)\n      .setXHROpt('data',this.query);  \n    this.retrieve(); \n    return this;     \n  } \n  \n  \n  processResults() {\n    var self = this;\n    $.when(this.resultsComplete).done(function() {\n      \n    });\n  }\n  \n  // To be called after results are processed. Each data class must return a total result count outside of filter limits.\n  \n  updateResultsInfo(totalResults) {\n    this.totalResults = totalResults;\n    this.totalPages = Math.ceil(this.totalResults / this.itemLimit);\n  }\n  \n  // Returns a handy object with result resultsInfo. Useful for updating pagination controllers.\n  \n  getResultInfo() {\n    return {\n      itemLimit: parseInt(this.itemLimit),\n      totalResults: parseInt(this.totalResults),\n      currentPage: parseInt(this.currentPage),\n      totalPages: parseInt(this.totalPages)\n    };\n  }\n  \n  // A shortcut to the results. Can only be called when this.resultsComplete is resolved.\n  \n  getResults() {\n    return this.results;\n  }\n  \n  getItem() {\n    return this.resultItem;\n  }\n  \n  // TO DO: Standardize methodology between item sets, individual items and data\n  \n  retrieveItem(id) {\n    \n  }\n  \n  makeURL(path) {\n    return this.dburl + \"/\" + path;\n  }\n        \n  // Retrieves data from storage. On success it calls an xhrResultsHandler (which is passed data directly)\n  // and a processResults (which is handed no arguments and is intended to operate on this.results)\n                  \n  retrieve() {\n    var self = this;\n    $.ajax($.extend(this.XHROpts,\n      {\n        success: \n          function(data,textStatus,jqXHR) { \n            self.results = data; \n            self.xhrResultsHandler(data,textStatus,jqXHR,self);\n            self.processResults();\n            self.resultsComplete.resolve(); \n          },\n      }\n    ));\n  }\n  \n  // Handles XHR Errors. This function must be explicity set as part of the $.ajax() parameters.\n  \n  xhrError(xhr, ajaxOptions, thrownError) {\n    console.log('error');\n    console.log(xhr);\n    console.log(thrownError);\n  }\n  \n  // called after a successful ajax request \n  // marks resultsComplete as resolve.\n  \n  xhrResultsHandler(data,textStatus,jqXHR,self) {\n  \n  }\n  \n  // see DSpace Handler for an extended implementation\n  \n  build_paths() {\n    return {\n      items: {\n        list: {                              // Returns a list of items\n          method: \"GET\",\n          path:     \"[path]\", \n          },                              \n        item: {                               // Returns a single item with ID %%\n          method: \"GET\",\n          path:     \"[path]/%%\"\n          },                           \n        item_metadata: {                      // Returns metadata for item %%\n          method: \"GET\",\n          path:     \"[path]/%%/[key]\",  \n          },       \n        find_by_metadata: {                   // Returns items based on specified metadata value\n          method: \"POST\",\n          path:     \"[path]\"\n        }     \n      },\n      query: {  \n        filtered_items: {                     // Returns items based on chosen filters\n          method: \"GET\",\n          path:     \"[path]\",  \n          },           \n        filtered_collections: {               // Returns collections based on chosen filters\n          method: \"GET\",\n          path:     \"[path]\",\n          }, \n        collection: {                         // Returns collection with ID %%\n          method: \"GET\",\n          path:     \"[path]/%%\",\n          }         \n      }\n    };\n  }\n}\n\n/* !DSPACE DATA HANDLER */\n\n/* TO DO: The data handler needs more granulation. It should handle ANY kind of DSpace request. Right now it's primarily designed\n   to retrieve filtered items, with a few methods to get individual items tacked on for convenience.\n   Each type of request should have its own handler, following the DSpace REST API’s structure.\n*/\n\nclass DSpaceDataHandler extends DiscoveryDataHandler {\n  constructor(dbURI, dbmethod) {\n    super(dbURI, dbmethod);\n    this.resetQueryParameters();\n  }\n  \n  resetQueryParameters() {\n    this.query = [];\n    this.expansion = []; // expands the dataset\n    this.filters = [];  // adds filters\n    this.fields = []; // fields to show\n  }\n\n  /* \n    \n    Available operators:\n    \n    exists\n    doesnt_exist\n    equals\n    not_equals\n    like\n    not_like\n    contains\n    doesnt_contain\n    matches\n    doesnt_match\n\n  */\n\n  setQueryParameter(parameter,value,operator='like') {\n    \n    this.query.push({\n      name:   \"query_field[]\",\n      value:  parameter\n    });\n    \n    this.query.push({\n      name:   \"query_op[]\",\n      value:  operator\n    });\n    \n    this.query.push({\n      name:   \"query_val[]\",\n      value:  value\n    });\n    \n    return this;  \n  }\n  \n  // Handles any special processing\n  \n  prepareQuery() {\n\n  }\n  \n  // A search term is general across all metadata\n  // Note: the “matches” operator alongside framing wildcards (“*value*”) returns a general case-insensitive result.\n  \n  setSearchTerm(value,operator='matches') {\n    this.setQueryParameter('*','(?i).*' + value + '*',operator);\n    return this;\n  }\n  \n  // called after a successful ajax request \n  \n  xhrResultsHandler(data,textStatus,jqXHR) {\n    super.xhrResultsHandler(data,textStatus,jqXHR);\n    if (typeof this.results.items === 'undefined') {\n      this.results.items = [];\n    }\n  }\n  \n  processResults() {\n    super.processResults();\n    var self = this;\n            \n    if (typeof self.expandedResults['unfiltered-item-count'] !== \"undefined\") {\n      self.updateResultsInfo(self.expandedResults['unfiltered-item-count']);\n    }\n    \n    for(var i=0; i<self.results.items.length; i++) {\n      var item = self.results.items[i];\n      \n      // Set default values.\n              \n      var values = {\n        subject: '',\n        byline: '',\n        title: ''\n      };\n      \n      if (typeof item.metadata !== \"undefined\") {\n        for(var j=0; j<item.metadata.length; j++) {\n          var md = item.metadata[j];\n          var key = md.key;\n          if (typeof values[key] === \"undefined\") {\n            values[key] = [];\n          }\n          values[key].push(md.value);\n        }\n      }\n      \n      // Join multiple values as single string\n      \n      for(var prop in values) {\n        if (values[prop] === \"undefined\" || typeof values[prop] !== 'object') {\n          values[prop] = '';\n        } else {\n          values[prop] = values[prop].join('%%');\n        }\n      }\n      \n      values.uuid = item.uuid.trim();\n\n      // Process contributors\n      values.byline = self.serializeDisplayString(values,'dc.contributor.author');\n      values.subjects = self.serializeDisplayString(values,'dc.subject');\n      \n      self.results.items[i].values = values;\n    }\n  }\n  \n  serializeDisplayString(values,key) {\n    var output = '';\n    \n    if (typeof values[key] !== \"undefined\") {\n      output = values[key].replaceAll('%%',', ');\n      output = output.replaceLast(',',' and');\n    }\n    \n    return output;\n  }\n  \n  setAdditionalParameter(parameter,value) {\n    this.query.push({\n      name: parameter,\n      value: value\n      });\n    return this;\n  }\n  \n  // TO DO\n  \n  setDateIssed(date,operator='<') {\n    return this;\n  }\n  \n  setDateUpdated(timestamp) {\n    var now = new Date(Date.now()).toUTCString();\n    var from = new Date(timestamp * 1000).toUTCString();\n    this.setQueryParameter('dc.date.updated',\"[\" + from + \" TO \" + now + \"]\",\"equals\");        \n  }\n        \n  setItemLimit(limit=6,page=1) {\n    super.setItemLimit(limit,page);\n    var offset= limit * (page - 1);\n    this\n      .setAdditionalParameter('limit',limit)\n      .setAdditionalParameter('offset',offset);\n    return this;\n  }\n  \n  setCollection(collectionID) {\n    this.setAdditionalParameter('collSel[]',collectionID);\n    return this;\n  }\n  \n  /*  Expands the returned dataset. \n    \n      Some values:\n        metadata\n        bitstreams\n        parentCollection\n        parentCollectionList\n        parentCommunityList\n  */\n        \n  expandQuery(expansionValue) {\n    if (this.expansion.includes(expansionValue) === false) {\n      this.expansion.push(expansionValue);\n      this.setAdditionalParameter('expand',this.expansion.join(','));\n    }\n    return this;\n  }\n  \n  // Filters the dataset. Exanmples include 'is_withdrawn' or 'is_discoverable'\n  \n  filterQuery(filter) {\n    this.filters.push(filter);\n    this.setAdditionalParameter('expand',this.filters.join(','));\n    return this;\n  }\n  \n  // A shortcut to include metadata in results\n  \n  includeMetaData() {\n    this.expandQuery('metadata');\n    return this;\n  }\n  \n  // A shortcut to include bitstreams in results\n  \n  includeBitstreams() {\n    this.expandQuery('bitstreams');\n    return this;\n  }\n  \n  /* ! -- AJAX call */\n  // See “HACK” below for explanation. Need to eliminate this.\n  \n  retrieve() {\n    var self = this;\n    $.ajax($.extend(this.XHROpts,\n      {\n        success: \n          function(data,textStatus,jqXHR) { \n            self.results = data; \n            self.xhrResultsHandler(data,textStatus,jqXHR,self);\n            self.retrieveExpandedResults();\n          },\n      }\n    ));\n  }\n  \n  // HACK: Can't seem to find a way to retrieve both a paginated result and the total number of results without pagination.\n  // This total value is required to set up a proper pagination UI.\n  // One option would be to retrieve all results unpaginated and parse them on the client side. \n  // As of now we're querying twice to get the number of unfiltered items.\n  \n  retrieveExpandedResults() {\n    var self = this;\n                    \n    $.ajax({\n        method: \"GET\",\n        async: true,\n        url: this.makeURL(this.paths.query.filtered_items.path),\n        data: this.query.filter(function(item){\n          return (item.name === 'limit' || item.name === 'offset') !== true;\n        }),\n        success: \n          function(data,textStatus,jqXHR) { \n            self.expandedResults = data;\n            self.processResults();\n            self.resultsComplete.resolve(); \n          }\n        });\n  }\n  \n  // TO DO: Some duct tape here. Standardize data retrieval methods for filtered items, individual items and bitstreams.\n  \n  retrieveItem(id) {\n    var self = this;\n    var item = {};\n    \n    this.prepareItemQuery();\n    this.itemComplete = $.Deferred();\n    \n    var opts = {\n      url: this.makeURL(this.paths.items.item.path.replace('%%',id)),\n      method: this.paths.items.item.method,\n      data: {\n        expand: 'metadata'\n      }\n    };\n    \n    $.ajax($.extend(opts,\n      {\n        success: \n          function(data,textStatus,jqXHR) { \n            item = data; \n            item.networkInfo = {\n              textStatus: textStatus,\n              xhr: jqXHR,\n              error: false,\n              errorData: {}\n            };\n            \n            self.resultItem = item;\n                        \n            self.itemComplete.resolve();\n          },\n        error:\n          function (xhr, ajaxOptions, thrownError) {\n            item.networkInfo = {\n              textStatus: 'error',\n              xhr: xhr,\n              error: true,\n              errorData: {\n                thrownError: thrownError,\n                options: ajaxOptions,\n              }\n            };\n            \n            self.itemComplete.resolve();\n            \n          }\n      }\n    ));\n    \n  }\n  \n  prepareItemQuery() {\n    \n  }\n\n        \n  // Builds DSpace-specific paths\n  // TO DO: Build this into a common schema for all storage devices\n  \n  build_paths() {\n    return {\n      items: {\n        list: {                              // Returns a list of items\n          method: \"GET\",\n          path:     \"items\", \n          },                              \n        item: {                               // Returns a single item with ID %%\n          method: \"GET\",\n          path:     \"items/%%\"\n          },                           \n        item_metadata: {                      // Returns metadata for item %%\n          method: \"GET\",\n          path:     \"items/%%/metadata\",  \n          },       \n        item_bitstreams: {                    // Returns available bitstreams for item %%\n          method: \"GET\",\n          path:     \"items/%%/bitstreams\"  \n          },\n        find_by_metadata: {                   // Returns items based on specified metadata value\n          method: \"POST\",\n          path:     \"items/find-by-metadata-field\"\n        }     \n      },\n      query: {  \n        filtered_items: {                     // Returns items based on chosen filters\n          method: \"GET\",\n          path:     \"filtered-items\",  \n          },           \n        filtered_collections: {               // Returns collections based on chosen filters\n          method: \"GET\",\n          path:     \"filtered-collections\",\n          }, \n        collection: {                         // Returns collection with ID %%\n          method: \"GET\",\n          path:     \"filtered-collections/%%\",\n          }         \n      },\n      bitstreams: { \n        list: {                               // Returns all bitstreams in DSpace\n          method: \"GET\",\n          path:     \"bitsreams\"\n        },\n        item: {                               // Returns an item with bitstream ID %%\n          method: \"GET\",\n          path:     \"bitstreams/{%%}\"\n        },\n        item_policy: {                        // Returns the policy for a bitstream with ID %%\n          method: \"GET\",\n          path:     \"bitstreams/%%/policy\"\n        },\n        content: {                             // Retrieve content for a bitstream with ID %%\n          method:  \"GET\",\n          path:      \"bitstreams/%%/retrieve\"\n        }\n      },\n      schemas: {\n        list: {                               // Returns a list of all schemas\n          method: \"GET\",\n          path:     \"registries/schema\"\n        },\n        item: {                               // Returns a metadata schema with schema prefix %%\n          method: \"GET\",\n          path:     \"registries/schema/%%\"\n        },\n        field: {                              // Returns a metadata schema with field ID %%\n          method: \"GET\",\n          path:     \"registries/metadata-fields/%%\"\n        }\n      }\n    };\n  }\n  \n}\n\n/* !DISCOVERY CLASS */\n\nclass Discovery {\n  constructor() {\n    this.dataOpQueue = [];\n    this.results = {};\n    this.items = [];\n    this.view = {};\n    this.controllers = {};\n    this.titleLabels = {\n      before: [],\n      after: []\n    };\n\n    \n    /* Example:\n      this.view = new ECommonsOntarioHTMLView(this);\n      this.data = new DSpaceDataHandler(vars.dbURI, vars.dbmethod);\n    */\n  }\n  \n  init() {\n    this.inboundState();\n  }\n  \n  registerController(label,controller) {\n    this.controllers[label] = controller;\n  }\n  \n  inboundState() {\n    \n  }\n        \n  // fired by Controller when it changes state.\n  // All controllers current op queues are reassembled.\n  \n  controllerStateChange() {\n    \n    this.resetDataOps();\n    \n    for (var controller in this.controllers) {\n      if (this.controllers[controller].queue.length > 0) {\n        this.dataOpQueue = this.dataOpQueue.concat(this.controllers[controller].queue);\n      }          \n    }\n                    \n    this.execute();\n  }\n  \n  setItemLimit(limit,page) {\n    this.data.setItemLimit(limit,page);\n  }\n  \n  resetDataOps() {\n    this.dataOpQueue = [];\n  }\n        \n  setDataOp(op,values) {\n\n    // remove spaces from values\n            \n    values = values.map(function(val){\n      val = val.trim();\n      return val;\n    });\n    \n    this.dataOpQueue.push({\n      op: op,\n      values: values\n    });\n  }\n  \n  quickSearch(term) {\n    this.dataOpQueue = [];\n    this.setDataOp('setSearchTerm',[term]);\n    this.execute();\n  }\n        \n  // Clears data parameters\n  \n  resetDataParameters() {\n    this.data.resetQueryParameters();\n  }\n  \n  // retrieves and displays data\n  \n  execute() {\n    var self = this;\n    self.retrieveData();\n    $.when(this.data.resultsComplete).done(function(){\n      self.results = self.data.getResults();\n      self.items = typeof self.results.items !== \"undefined\" ? self.results.items : [];\n      self\n        .updateTitleLabels()\n        .displayResults()\n        .updateControllers();\n    });\n  }\n  \n  updateTitleLabels() {\n    \n    this.titleLabels = {\n      before: [],\n      after: []\n    };\n    \n    for (var controller in this.controllers) {\n      this.titleLabels.before = this.titleLabels.before.concat(this.controllers[controller].labels.before);\n      this.titleLabels.after = this.titleLabels.after.concat(this.controllers[controller].labels.after);\n    }\n    \n    return this;\n\n  }\n  \n  // Updates all registered controllers\n  \n  updateControllers() {\n    for(var controller in this.controllers) {\n      this.controllers[controller].updateController();\n    } \n  }\n  \n  // Resets all controllers\n  \n  resetControllers() {\n    for(var controller in this.controllers) {\n      this.controllers[controller].reset();\n    } \n  }\n  \n  // An Alias for reset Data Parameters\n  \n  newQuery() {\n     this.resetDataParameters();\n  }\n  \n  /* !-- Retrieve Data */\n\n  retrieveData() {\n    var self = this;\n    this.resetDataParameters();\n    this.dataOpQueue.forEach(function(item){\n      self.data[item.op].apply(self.data,item.values);\n    });\n    self.data.executeQuery();\n    return this;\n  }      \n  \n  // This function can only be called when this.data.resultsComplete has been resolved.\n  \n  displayResults() {\n    this.view\n      .setItems(this.items)\n      .setTitleLabels(this.titleLabels)\n      .displayQueryResults();\n      \n    return this;\n  }\n}\n\n/* !ECO DISCOVERY CLASS */\n/*\n  vars expects:\n  \n  {\n    dbURI:      'books.spi.ryerson.ca/rest',\n    dbmethod:   'https'\n  }\n  \n*/\n\nclass ECommonsOntarioDiscovery extends Discovery {\n  constructor(vars) {\n    super();\n    this.data = new DSpaceDataHandler(vars.dbURI, vars.dbmethod);\n    this.view = new ECommonsOntarioHTMLView(this);\n    \n    // TO DO: There could be auto-discovery here\n    \n    this.registerController('criteriaController',new ECommonsOntarioCriteriaController(this));\n    this.registerController('paginationController', new HTMLPaginationController(this));\n    \n  }\n  \n  /* !--Initial State of Application */\n  \n  // Right now only accepts search and language parameters\n  // Called by init() function\n  \n  inboundState() {\n    var op = getUrlParameter('op');\n    var value = decodeURIComponent(getUrlParameter('value'));\n\n    if (op === 'setSearchTerm') {\n      this.controllers.criteriaController.reset();\n      var searchElement = $(\"#search-value\");\n      searchElement.val(value);\n      // TO DO: this step should somehow be bundled in with markControlForInclusion.\n      // The latter function needs more sophistication to be able to handle different input controls.\n      searchElement.attr('data-value',value); \n      this.controllers.criteriaController.markControlForInclusion(searchElement);\n    }\n    \n    for(var controller in this.controllers) {\n      this.controllers[controller].enqueue();\n    }\n    \n    // Executes the initial state of the controllers.\n    \n    this.controllerStateChange();\n  }\n  \n  setItemLimit(limit,page) {\n    super.setItemLimit(limit,page);\n  }\n  \n  resetDataParameters() {\n    super.resetDataParameters();\n    this.data.includeMetaData();\n  }\n  \n}\n\n/* !CATALOGUE ITEM VIEW */\n\nclass CatalogueItemView {\n  constructor(discoveryObj,itemObj) {\n    this.discoveryObj = discoveryObj;\n    this.itemObj = itemObj;\n    this.item = {};\n  }\n  \n  displayItemResults() {\n    var self = this;   \n    this.item = this.itemObj.item;            \n  }\n  \n  processTokens() {\n    \n  }\n\n}\n\n/* !HTML ITEM VIEW */\n\n/* TO DO: Need to rationalize this with the View classes above. Ultimately we need to commit to a\n   portable templating system that can be used consistently. */\n\nclass HTMLItemView extends CatalogueItemView {\n  constructor(discoveryObj,itemObj) {\n    super(discoveryObj,itemObj);\n    this.initDisplay();\n  }\n  \n  displayItemResults() {\n    super.displayItemResults();\n    this.processTokens();\n  }\n  \n  initDisplay() {\n    $('#available-versions').hide();\n  }\n  \n  // TO DO: This leverages original code. Will work to incorporate a consistent templating system.\n  \n  processTokens() {\n    \n  var data = this.item;\n\n\t$('#textbook-title').text(data.name);\n\tvar author='';\n\tvar subjects=[];\n\t\n\t$.each(data.metadata,function(k,v){\n\t\tif(v.key==='dc.contributor.author'){\n\t\t\tvar authorelement='<div class=\"author-info\"><h4 class=\"author-name\">'+v.value+'</h4><p class=\"author-bio\">';\n\t\t\tif(v.image_url){\n\t\t\t\tauthorelement=authorelement+'<img class=\"author-portrait\" src=\"'+v.image_url+'\" class=\"author-portrait\">';\n\t\t\t}\n\t\t\tif(v.bio){\n\t\t\t\tauthorelement=authorelement+v.bio;\n\t\t\t}\n\t\t\tauthorelement=authorelement+'</p></div>';\n\t\t\t$('#authors').append(authorelement);\n\t\t\t$('#textbook-title-authors').text(v.value);\n\t\t}\n\t\tif(v.key==='dc.subject'){\n\t\t\tsubjects.push(v.value);\n\t\t}\n\t\tif(v.key==='dc.description.abstract'){\n\t\t\t$('#textbook-description-info').html('<p>'+v.value+'</p>');\n\t\t}\n\t\tif(v.key==='LRMI.EducationalAudience'){\n\t\t\t$('#level').text(v.value);\n\t\t}\n\t\tif(v.key==='dc.date.created'){\n\t\t\t$('#date-published').text(v.value);\n\t\t}\n\t\tif(v.key==='dc.type'){\n\t\t\t$('#type').text(v.value);\n\t\t}\n\t});\n\t\n\tvar subj=subjects.join(\",\");\n\t$('#subjects').text(subj);\n\t$('#preview-bookcover').attr('src',data.cover_url);\n\n\t//$('#textbook-table-of-contents-info').html();\n\t//$('#adapted-from').text();\n\t//$('#adoption-count').text();\n\t//$('#peerreview-count').text();\n\t\n\tif (data.bitstreams !== null) {\n  \t$.each(data.bitstreams,function(k,v){\n  \t\t$('#available-versions ul').append('<li><a href=\"'+v.retrieveLink+'\" target=\"_blank\">'+v.format+'</a></li>');\n  \t});\n\t} else {\n  \t$('#read-versions').hide();\n\t}\n\n\t$('#download-btn').click(function(){\n\t\t$('#download-btn').toggleClass('noradiusbtn');\n\t\t$('#available-versions').toggle();\n\t});\n\t\n\t// Cleanup\n\t\n\t// Kludgy.\n\t\n\t$('.metadata-item').each(function(){\n  \tvar item = $(this);\n  \tif (item.find('p').text() === '') {\n    \titem.hide();\n  \t}\n\t})\n\t\n\t$('#textbook-social-media').hide();\n    \n    \n    \n  }\n}\n\n/* !CATALOGUE ITEM CLASS */\n\nclass CatalogueItem {\n  constructor(discoveryObj) {\n    this.discoveryObj = discoveryObj;\n    this.id = null;\n    this.item = {};\n    //this.view = new CatalogueItemView;\n  }\n  \n  displayResults() {\n    this.view.displayItemResults();\n  }\n}\n\n/* !ECO CATALOGUE ITEM CLASS */\n\nclass ECommonsOntarioCatalogueItem extends CatalogueItem {\n  constructor(discoveryObj) {\n    super(discoveryObj);\n    this.view = new HTMLItemView(discoveryObj,this);\n    \n    var self = this;\n            \n    this.id = decodeURIComponent(getUrlParameter('id'));\n    this.discoveryObj.data.retrieveItem(this.id);\n    \n    $.when(discoveryObj.data.itemComplete).done(function(){\n      self.item = self.discoveryObj.data.getItem();\n      self.displayResults();\n    });\n  }\n  \n  displayResults() {\n    super.displayResults();    \n  }\n}\n\n\n// Functions like PHP’s ucfirst()\n\nString.prototype.ucfirst = function() {\n  return this.charAt(0).toUpperCase() + this.slice(1);\n};\n\n// Replaces all instances of a string\n\nString.prototype.replaceAll = function(search, replacement) {\n  var target = this;\n  return target.replace(new RegExp(search, 'g'), replacement);\n};\n\nString.prototype.replaceLast = function(find, replace) {\n  var index = this.lastIndexOf(find);\n\n  if (index >= 0) {\n      return this.substring(0, index) + replace + this.substring(index + find.length);\n  }\n\n  return this.toString();\n};\n\n// Helper function comma delimits an array and replaces the last comma with a conjunction.\n\nArray.prototype.concatToSentence = function(conjunction = 'and') {\n  var sentence = this.join(', ');\n  return sentence.replaceLast(',',' ' + conjunction);\n};\n\n// With thanks to http://www.jquerybyexample.net/2012/06/get-url-parameters-using-jquery.html\n\nfunction getUrlParameter (sParam) {\n    var sPageURL = decodeURIComponent(window.location.search.substring(1)),\n    sURLVariables = sPageURL.split('&'),\n    sParameterName,\n    i;\n\n  for (i = 0; i < sURLVariables.length; i++) {\n    sParameterName = sURLVariables[i].split('=');\n\n    if (sParameterName[0] === sParam) {\n        return sParameterName[1] === undefined ? true : sParameterName[1];\n    }\n  }\n}\n\n\n"],"sourceRoot":"assets/scripts/"}