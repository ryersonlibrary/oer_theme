{"version":3,"sources":["../assets/scripts/find.js"],"names":["$","DiscoveryController","discoveryObj","controller","CriteriaSelectionController","facets","queue","PaginationController","nextPage","previousPage","pageMarkers","HTMLPaginationController","HTMLSearchBox","HTMLCriteriaController","find","initUI","self","each","facet","data","undefined","initfnc","ucfirst","bind","event","preventDefault","item","toggleClass","removeAttr","siblings","setAttribute","submit","input","val","length","attr","keyCode","which","values","push","op","replace","split","enqueue","controllerStateChange","DiscoveryView","items","HTMLView","view","stage","titleStage","templates","parseTemplates","twrapper","html","remove","template","processed","match","forEach","token","key","replaceAll","append","processTokens","book_capsule","ECommonsOntarioCriteriaController","ECommonsOntarioHTMLView","discoveryObject","DiscoveryDataHandler","dbURI","dbmethod","dburl","paths","build_paths","query","resultsComplete","XHROpts","resetXHROpts","results","parameter","value","operator","Parameter","term","limit","offset","async","method","error","xhrError","Deferred","opt","prepareQuery","setXHROpt","makeURL","filtered_items","path","retrieve","when","done","ajax","extend","success","textStatus","jqXHR","xhrResultsHandler","processResults","resolve","xhr","ajaxOptions","thrownError","console","log","list","item_metadata","find_by_metadata","filtered_collections","collection","DSpaceDataHandler","resetQueryParameters","expansion","filters","fields","name","setQueryParameter","i","uuid","subject","byline","title","metadata","j","md","prop","join","serializeDisplayString","subjects","output","replaceLast","setAdditionalParameter","collectionID","expansionValue","includes","filter","expandQuery","item_bitstreams","bitstreams","item_policy","content","schemas","field","Discovery","dataOpQueue","criteriaController","execute","map","trim","setDataOp","retrieveData","getResults","displayResults","resetDataParameters","apply","executeQuery","setItems","displayQueryResults","ECommonsOntarioDiscovery","vars","paginationController","inboundState","getUrlParameter","decodeURIComponent","quickSearch","includeMetaData","document","ready","discovery","jQuery","String","prototype","charAt","toUpperCase","slice","search","replacement","target","RegExp","index","lastIndexOf","substring","toString","sParam","sPageURL","window","location","sURLVariables","sParameterName"],"mappings":"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","file":"find.js","sourcesContent":["/* jshint latedef:nofunc */\n//needed for function hoisting for build \n\n(function($) {\n  \n    /* !DISCOVERY CONTROLLER CLASS */\n    \n    // Core Controller Class\n    \n    class DiscoveryController {\n      constructor(discoveryObj) {\n        this.discoveryObj = discoveryObj;\n        this.controller = null;\n      }  \n            \n      submit() {\n        \n      }\n      \n    }\n    \n    // Manages UIs that submit filter criteria.\n    \n    /* !CRITERIA SELECTION CONTROLLER CLASS */\n    \n    class CriteriaSelectionController extends DiscoveryController {\n      constructor(discoveryObj) {\n        super(discoveryObj);\n        this.facets = null;\n        this.queue = [];\n      }\n      \n      enqueue() {\n        \n      }\n    }\n    \n    /* !PAGINATION CONTROLLER CLASS */\n    // Manages Pagination UIs.\n    \n    class PaginationController extends DiscoveryController {\n      constructor(discoveryObj) {\n        super(discoveryObj);\n        this.nextPage = null;\n        this.previousPage = null;\n        this.pageMarkers = null;\n      }\n    }\n    \n    // Manages HTML5-Based Pagination UIs\n    class HTMLPaginationController extends PaginationController {\n      constructor(discoveryObj) {\n        super(discoveryObj);\n      }\n    }\n    \n    /* !HTML SEARCH BOX CLASS */\n    // Manages standalone Search Box UIs\n    \n    class HTMLSearchBox extends CriteriaSelectionController {\n      constructor(discoveryObj) {\n        super(discoveryObj);\n      }\n    }\n        \n    /* !HTMLUIController */\n        \n    class HTMLCriteriaController extends CriteriaSelectionController {\n      constructor(discoveryObj) {\n        super(discoveryObj);\n        this.controller = $(\"[data-widget='discovery-controller']\");\n        this.facets = this.controller.find(\"[data-facet]\");\n        this.initUI();\n      }\n      \n      initUI() {\n        var self = this;\n        \n        /* \n           Allows us to define widget initialization methods based on the ui-type.\n           Methods are in the form init[ui-type], with ui-type capitalized.\n           \n           Initialization functions are responsible for the following:\n           - Binding the appropriate change event (e.g. a click for a list or change for a selection). \n           - Adding its parent facet to the query queue by assigning it a 'data-enqueue' attribute.\n           - Adding a 'data-selected' attribute to any selected item.\n           - Resetting the facet if a user selects an “all” or “none” value, indicated in the controller by a '*' data-value.\n           - Firing the controller’s submit method.\n           - Performing any UX event modifications (such as preventing default link behaviour on link lists).\n        */\n        \n        this.facets.each(function() {\n          var facet = $(this);\n          if (typeof facet.data('ui-type') === undefined) { return; }\n          var initfnc = \"init\" + facet.data('ui-type').ucfirst();\n          if (typeof self[initfnc] !== 'function') { return; }\n          self[initfnc](facet);\n        });\n      }\n                  \n      initList(facet) {\n        var self = this;\n        facet.find('[data-user-input-wrapper]').find('li').each(function() {\n          $(this).bind('click',function(event) {\n            event.preventDefault();\n            var item = $(this);\n            item.toggleClass('selected');\n            if (item.data('value') === '*') {\n              facet.removeAttr('data-enqueue');\n              item.siblings('li').removeAttr('data-selected');\n            } else {\n              facet[0].setAttribute('data-enqueue',''); // Use native JS to set boolean attribute\n              item[0].setAttribute('data-selected',''); \n            }\n            self.submit();\n          });\n        });        \n      }\n      \n      initTextfield(facet) {\n        var self = this;\n        facet.find('[data-user-input]').each(function() {\n          $(this).bind('keypress',function(event) {\n            var input = $(this);\n            if(input.val().length > 2) { // Don’t submit if there are less than three characters in the text field\n              facet[0].setAttribute('data-enqueue',''); // Use native JS to set boolean attribute\n              input[0].setAttribute('data-selected','');\n              input.attr('data-value',input.val());\n              self.submit();\n            } else {\n              facet.removeAttr('data-enqueue');\n              input.removeAttr('data-selected');\n            }\n          })\n          .bind('keypress', function(event) { // intercepts return character which would otherwise \"submit\" the form\n            if ((event.keyCode ? event.keyCode : event.which) === 13) {\n              self.submit();\n              return false;\n            } else { \n              return true;\n            }\n          });\n        });\n      }   \n      \n      /* \n          Adds a list of data retrieval objects to the queue. Data retrieval objects contain a\n          data op (corresponding to a method of the data object) and values corresponding to its\n          arguments.\n      */   \n      \n      enqueue() {\n        var self = this;\n        this.queue = [];\n        this.controller.find('[data-enqueue]').each(function() {\n          var facet = $(this);\n          var values = [];\n          facet.find('[data-selected]').each(function() {\n            self.queue.push(\n              {\n                op: facet.data('op'),\n                values: facet.data('param').replace('%%',$(this).attr('data-value')).split('|')\n              }\n            );\n          });\n          \n        });\n      }\n      \n      submit() {\n        super.submit();\n        this.enqueue();\n        this.discoveryObj.controllerStateChange();\n      }\n      \n      \n    }\n    \n    /* !DISCOVERY VIEW CLASS */\n    \n    class DiscoveryView {\n      contructor(discoveryObj) {\n        this.items = [];\n      }\n      \n      setItems(items) {\n        this.items = items;\n        return this;\n      }\n      \n      displayQueryResults() {\n\n      }\n    }\n    \n    \n    /* !HTML VIEW CLASS */\n    \n    \n    // Displays results on HTML5 Stage\n    \n    class HTMLView extends DiscoveryView {\n      constructor(discoveryObj) {\n        super(discoveryObj);\n        this.view = $('[data-view-results]');\n        this.stage = this.view.find('[data-view-stage]');\n        this.titleStage = this.view.find('[data-view-title-stage]');\n        this.templates = {};\n        this.parseTemplates();        \n      }\n      \n      // Finds templates in the DOM and adds them to the templates object.\n      // Templates are designated in the DOM by a [data-view-template-wrapper] boolean attribute.\n      // This script expects that each wrapper have [data-template-name], which will be used as\n      // an object property. The template block is then removed from the DOM.\n      \n      parseTemplates() {\n        var self = this;\n        var templates = this.view.find('[data-view-templates]');\n        templates.find('[data-view-template-wrapper]').each(function(){\n          var twrapper = $(this);\n          self.templates[twrapper.data('view-template-name')] = twrapper.html();\n        })\n        .remove();\n      }\n      \n      // Tokens are processed as follows:  \n      // %%DataKey%%\n      \n      processTokens(template,item) {\n        var processed = template;\n        template.match(/\\%\\%[^\\%]*\\%\\%/g).forEach(function(token) {\n          var key = token.replaceAll('%%','');\n          processed = processed.replaceAll(token,item.values[key]);\n        });\n        \n        return processed;\n      }\n      \n      displayQueryResults() {\n        var self = this;\n        self.stage.html('');\n        this.items.forEach(function(item) {\n          self.stage.append(self.processTokens(self.templates.book_capsule,item));\n        });\n      }\n    }\n    \n    // Displays controller particular to the ECommonsOntario site\n    \n    class ECommonsOntarioCriteriaController extends HTMLCriteriaController {\n      constructor(discoveryObj) {\n        super(discoveryObj);\n      }\n    }\n    \n    // Displays results particular to the ECommonsOntario site\n    \n    class ECommonsOntarioHTMLView extends HTMLView {\n      constructor(discoveryObject) {\n        super(discoveryObject);\n      }\n    }\n        \n    /* !DATA HANDLER */\n    \n    class DiscoveryDataHandler {\n      constructor(dbURI, dbmethod) {\n        this.dburl = dbmethod + '://' + dbURI;\n        this.paths = this.build_paths();\n        this.query = {};\n        this.resultsComplete;\n        this.XHROpts = this.resetXHROpts();\n        this.results = {};\n      }\n            \n      resetQueryParameters() {\n        this.query = {};\n      }\n  \n      // Placeholder. Will be particualar to database implementation. \n      \n      setQueryParameter(parameter,value,operator='like') {\n        this.query[Parameter] = value;\n        return this;  \n      }\n      \n      // Placeholder. Will be particular to database implementation\n      \n      setSearchTerm(term,operator='matches') {\n        return this;\n      }\n      \n      // Placeholder. Will be particular to database implementation\n      \n      setDateIssed(value,operator='<') {\n        return this;\n      }\n      \n      // Placeholder. Will be particualar to database implementation. \n      \n      setLimit(limit,offset) {\n        return this;\n      }      \n      \n      // A wrapper for the query Parameter\n      \n      getQuery() {\n        return this.query;\n      }\n      \n      // Sets default options for the AJAX call.\n      \n      resetXHROpts() {\n        this.XHROpts = {\n          async: true,\n          method: \"GET\", // default\n          //traditional: true,\n          //crossOrigin: true,\n          error: this.xhrError,\n        };\n        \n        this.resultsComplete= $.Deferred()\n      }\n      \n      // Set AJAX option as per http://api.jquery.com/jquery.ajax/\n      \n      setXHROpt(opt,value) {\n        this.XHROpts[opt] = value;\n        return this;\n      }\n      \n      // Wrapper that returns AJAX options\n      \n      getXHROpts() {\n        return this.XHROpts;\n      }\n      \n      // Performs filtered query\n      \n      executeQuery() {\n        this.resetXHROpts();\n        this.prepareQuery();\n        this\n          .setXHROpt('url',this.makeURL(this.paths.query.filtered_items.path))\n          .setXHROpt('method',this.paths.query.filtered_items.method)\n          .setXHROpt('data',this.query);  \n        this.retrieve(); \n        return this;     \n      }\n      \n      processResults() {\n        var self = this;\n        $.when(this.resultsComplete).done(function() {\n          \n        });\n      }\n      \n      // A shortcut to the results. Can only be called when this.resultsComplete is resolved.\n      \n      getResults() {\n        return this.results;\n      }\n      \n      makeURL(path) {\n        return this.dburl + \"/\" + path;\n      }\n      \n      /* ! -- AJAX call */\n                      \n      retrieve() {\n        var self = this;\n        $.ajax($.extend(this.XHROpts,\n          {\n            success: \n              function(data,textStatus,jqXHR) { \n                self.results = data; \n                self.xhrResultsHandler(data,textStatus,jqXHR,self);\n                self.processResults();\n                self.resultsComplete.resolve(); \n              },\n          }\n        ));\n      }\n      \n      xhrError(xhr, ajaxOptions, thrownError) {\n        console.log('error');\n        console.log(xhr);\n        console.log(thrownError);\n      }\n      \n      // called after a successful ajax request \n      // marks resultsComplete as resolve.\n      \n      xhrResultsHandler(data,textStatus,jqXHR,self) {\n      \n      }\n      \n      // see DSpace Handler for an extended implementation\n      \n      build_paths() {\n        return {\n          items: {\n            list: {                              // Returns a list of items\n              method: \"GET\",\n              path:     \"[path]\", \n              },                              \n            item: {                               // Returns a single item with ID %%\n              method: \"GET\",\n              path:     \"[path]/%%\"\n              },                           \n            item_metadata: {                      // Returns metadata for item %%\n              method: \"GET\",\n              path:     \"[path]/%%/[key]\",  \n              },       \n            find_by_metadata: {                   // Returns items based on specified metadata value\n              method: \"POST\",\n              path:     \"[path]\"\n            }     \n          },\n          query: {  \n            filtered_items: {                     // Returns items based on chosen filters\n              method: \"GET\",\n              path:     \"[path]\",  \n              },           \n            filtered_collections: {               // Returns collections based on chosen filters\n              method: \"GET\",\n              path:     \"[path]\",\n              }, \n            collection: {                         // Returns collection with ID %%\n              method: \"GET\",\n              path:     \"[path]/%%\",\n              }         \n          }\n        };\n      }\n    }\n    \n    /* !DSPACE HANDLER */\n    \n    class DSpaceDataHandler extends DiscoveryDataHandler {\n      constructor(dbURI, dbmethod) {\n        super(dbURI, dbmethod);\n        this.resetQueryParameters();\n      }\n      \n      resetQueryParameters() {\n        this.query = [];\n        this.expansion = []; // expands the dataset\n        this.filters = [];  // adds filters\n        this.fields = []; // fields to show\n      }\n  \n      /* \n        \n        Available operators:\n        \n        exists\n        doesnt_exist\n        equals\n        not_equals\n        like\n        not_like\n        contains\n        doesnt_contain\n        matches\n        doesnt_match\n    \n      */\n\n      setQueryParameter(parameter,value,operator='like') {\n        \n        this.query.push({\n          name:   \"query_field[]\",\n          value:  parameter\n        });\n        \n        this.query.push({\n          name:   \"query_op[]\",\n          value:  operator\n        });\n        \n        this.query.push({\n          name:   \"query_val[]\",\n          value:  value\n        });\n        \n        return this;  \n      }\n      \n      // Handles any special processing\n      \n      prepareQuery() {\n\n      }\n      \n      // A search term is general across all metadata\n      // Note: the “matches” operator alongside framing wildcards (“*value*”) returns a general case-insensitive result.\n      \n      setSearchTerm(value,operator='matches') {\n        this.setQueryParameter('*','(?i).*' + value + '*',operator);\n        return this;\n      }\n      \n      // called after a successful ajax request \n      \n      xhrResultsHandler(data,textStatus,jqXHR) {\n        super.xhrResultsHandler(data,textStatus,jqXHR);\n        if (typeof this.results.items === 'undefined') {\n          this.results.items = [];\n        }\n      }\n      \n      processResults() {\n        super.processResults();\n        var self = this;\n        for(var i=0; i<self.results.items.length; i++) {\n          var item = self.results.items[i];\n          \n          // Set default values.\n                  \n          var values = {\n            uuid: item.uuid,\n            subject: '',\n            byline: '',\n            title: ''\n          };\n          \n          if (typeof item.metadata !== \"undefined\") {\n            for(var j=0; j<item.metadata.length; j++) {\n              var md = item.metadata[j];\n              var key = md.key;\n              if (typeof values[key] === \"undefined\") {\n                values[key] = [];\n              }\n              values[key].push(md.value);\n            }\n          }\n          \n          // Join multiple values as single string\n          \n          for(var prop in values) {\n            if (values[prop] === \"undefined\" || typeof values[prop] !== 'object') {\n              values[prop] = '';\n            } else {\n              values[prop] = values[prop].join('%%');\n            }\n          }\n                      \n          // Process contributors\n          values.byline = self.serializeDisplayString(values,'dc.contributor.author');\n          values.subjects = self.serializeDisplayString(values,'dc.subject');\n          \n          self.results.items[i].values = values;\n        }\n      }\n      \n      serializeDisplayString(values,key) {\n        var output = '';\n        \n        if (typeof values[key] !== \"undefined\") {\n          output = values[key].replaceAll('%%',', ');\n          output = output.replaceLast(',',' and');\n        }\n        \n        return output;\n      }\n      \n      setAdditionalParameter(parameter,value) {\n        this.query.push({\n          name: parameter,\n          value: value\n          });\n        return this;\n      }\n      \n      // TO DO\n      \n      setDateIssed(term,operator='<') {\n        return this;\n      }\n      \n      // Rudimentary. Will be particualar to database implementation. \n      \n      setLimit(limit=100,offset=0) {\n        this\n          .setAdditionalParameter('limit',limit)\n          .setAdditionalParameter('offset',offset);\n        return this;\n      }\n      \n      setCollection(collectionID) {\n        this.setAdditionalParameter('collSel[]',collectionID);\n        return this;\n      }\n      \n      /*  Expands the returned dataset. \n        \n          Some values:\n            metadata\n            bitstreams\n            parentCollection\n            parentCollectionList\n            parentCommunityList\n      */\n            \n      expandQuery(expansionValue) {\n        if (this.expansion.includes(expansionValue) === false) {\n          this.expansion.push(expansionValue);\n          this.setAdditionalParameter('expand',this.expansion.join(','));\n        }\n        return this;\n      }\n      \n      // Filters the dataset. Exanmples include 'is_withdrawn' or 'is_discoverable'\n      \n      filterQuery(filter) {\n        this.filters.push(filter);\n        this.setAdditionalParameter('expand',this.filters.join(','));\n        return this;\n      }\n      \n      // A shortcut to include metadata in results\n      \n      includeMetaData() {\n        this.expandQuery('metadata');\n        return this;\n      }\n      \n      // A shortcut to include bitstreams in results\n      \n      includeBitstreams() {\n        this.expandQuery('bitstreams');\n        return this;\n      }\n            \n      // Builds DSpace-specific paths\n      // TO DO: Build this into a common schema for all storage devices\n      \n      build_paths() {\n        return {\n          items: {\n            list: {                              // Returns a list of items\n              method: \"GET\",\n              path:     \"items\", \n              },                              \n            item: {                               // Returns a single item with ID %%\n              method: \"GET\",\n              path:     \"items/%%\"\n              },                           \n            item_metadata: {                      // Returns metadata for item %%\n              method: \"GET\",\n              path:     \"items/%%/metadata\",  \n              },       \n            item_bitstreams: {                    // Returns available bitstreams for item %%\n              method: \"GET\",\n              path:     \"items/%%/bitstreams\"  \n              },\n            find_by_metadata: {                   // Returns items based on specified metadata value\n              method: \"POST\",\n              path:     \"items/find-by-metadata-field\"\n            }     \n          },\n          query: {  \n            filtered_items: {                     // Returns items based on chosen filters\n              method: \"GET\",\n              path:     \"filtered-items\",  \n              },           \n            filtered_collections: {               // Returns collections based on chosen filters\n              method: \"GET\",\n              path:     \"filtered-collections\",\n              }, \n            collection: {                         // Returns collection with ID %%\n              method: \"GET\",\n              path:     \"filtered-collections/%%\",\n              }         \n          },\n          bitstreams: { \n            list: {                               // Returns all bitstreams in DSpace\n              method: \"GET\",\n              path:     \"bitsreams\"\n            },\n            item: {                               // Returns an item with bitstream ID %%\n              method: \"GET\",\n              path:     \"bitstreams/{%%}\"\n            },\n            item_policy: {                        // Returns the policy for a bitstream with ID %%\n              method: \"GET\",\n              path:     \"bitstreams/%%/policy\"\n            },\n            content: {                             // Retrieve content for a bitstream with ID %%\n              method:  \"GET\",\n              path:      \"bitstreams/%%/retrieve\"\n            }\n          },\n          schemas: {\n            list: {                               // Returns a list of all schemas\n              method: \"GET\",\n              path:     \"registries/schema\"\n            },\n            item: {                               // Returns a metadata schema with schema prefix %%\n              method: \"GET\",\n              path:     \"registries/schema/%%\"\n            },\n            field: {                              // Returns a metadata schema with field ID %%\n              method: \"GET\",\n              path:     \"registries/metadata-fields/%%\"\n            }\n          }\n        };\n      }\n      \n    }\n    \n    /* !DISCOVERY CLASS */\n    \n    class Discovery {\n      constructor() {\n        this.dataOpQueue = [];\n        this.results = {};\n        this.items = [];\n        this.view = {};\n        \n        /* Example:\n          this.criteriaController = new ECommonsOntarioCriteriaController(this);\n          this.paginationController = new HTMLPaginationController(this);\n          this.view = new ECommonsOntarioHTMLView(this);\n          this.data = new DSpaceDataHandler(vars.dbURI, vars.dbmethod);\n        */\n      }\n      \n      // fired by Controller when it changes state\n      \n      controllerStateChange() {\n        this.dataOpQueue = this.criteriaController.queue;\n        this.execute();\n      }\n            \n      setDataOp(op,values) {\n\n        // remove spaces from values\n                \n        values = values.map(function(val){\n          val = val.trim();\n          return val;\n        });\n        \n        this.dataOpQueue.push({\n          op: op,\n          values: values\n        });\n      }\n      \n      quickSearch(term) {\n        this.dataOpQueue = [];\n        this.setDataOp('setSearchTerm',[term]);\n        this.execute();\n      }\n            \n      // Clears data parameters\n      \n      resetDataParameters() {\n        this.data.resetQueryParameters();\n      }\n      \n      // retrieves and displays data\n      \n      execute() {\n        var self = this;\n        self.retrieveData();\n        $.when(this.data.resultsComplete).done(function(){\n          self.results = self.data.getResults();\n          self.items = typeof self.results.items !== \"undefined\" ? self.results.items : [];\n          self.displayResults();\n        });\n      }\n      \n      retrieveData() {\n        var self = this;\n        self.resetDataParameters();\n        this.dataOpQueue.forEach(function(item){\n          self.data[item.op].apply(self.data,item.values);\n        });\n        self.data.executeQuery();\n        return this;\n      }      \n      \n      // This function can only be called when this.data.resultsComplete has been resolved.\n      \n      displayResults() {\n        this.view\n          .setItems(this.items)\n          .displayQueryResults();\n      }\n    }\n    \n    /* !ECO DISCOVERY CLASS */\n    /*\n      vars expects:\n      \n      {\n        dbURI:      'books.spi.ryerson.ca/rest',\n        dbmethod:   'https'\n      }\n      \n    */\n    \n    class ECommonsOntarioDiscovery extends Discovery {\n      constructor(vars) {\n        super();\n        this.criteriaController = new ECommonsOntarioCriteriaController(this);\n        this.paginationController = new HTMLPaginationController(this);\n        this.view = new ECommonsOntarioHTMLView(this);\n        this.data = new DSpaceDataHandler(vars.dbURI, vars.dbmethod);\n        this.inboundState();\n      }\n      \n      // Right now only accepts search paramaters\n      \n      inboundState() {\n        var op = getUrlParameter('op');\n        var value = decodeURIComponent(getUrlParameter('value'));\n                \n        if (op === 'setSearchTerm') {\n          this.quickSearch(value);\n          $('#search-value').val(value);\n        } else {\n          this.setDataOp('setQueryParameter',['dc:language','en']);\n          this.execute();\n        }\n        \n        \n      }\n      \n      resetDataParameters() {\n        super.resetDataParameters();\n        this.data.includeMetaData();\n      }\n      \n    }\n    \n    /* !DOCUMENT READY */\n    \n    $(document).ready(function() {\n            \n      var discovery = new ECommonsOntarioDiscovery\n        ({\n          dbURI:        'books.spi.ryerson.ca/rest',\n          dbmethod:     'https'\n        });\n      \n      // var results = discovery.data.setSearchTerm('Electrical').includeMetaData().executeQuery().getResults();\n      \n    });\n  \n})(jQuery);\n\n// Functions like PHP’s ucfirst()\n\nString.prototype.ucfirst = function() {\n  return this.charAt(0).toUpperCase() + this.slice(1);\n};\n\n// Replaces all instances of a string\n\nString.prototype.replaceAll = function(search, replacement) {\n  var target = this;\n  return target.replace(new RegExp(search, 'g'), replacement);\n};\n\nString.prototype.replaceLast = function(find, replace) {\n  var index = this.lastIndexOf(find);\n\n  if (index >= 0) {\n      return this.substring(0, index) + replace + this.substring(index + find.length);\n  }\n\n  return this.toString();\n};\n\n// With thanks to http://www.jquerybyexample.net/2012/06/get-url-parameters-using-jquery.html\n\nfunction getUrlParameter (sParam) {\n    var sPageURL = decodeURIComponent(window.location.search.substring(1)),\n    sURLVariables = sPageURL.split('&'),\n    sParameterName,\n    i;\n\n  for (i = 0; i < sURLVariables.length; i++) {\n    sParameterName = sURLVariables[i].split('=');\n\n    if (sParameterName[0] === sParam) {\n        return sParameterName[1] === undefined ? true : sParameterName[1];\n    }\n  }\n}\n\n\n"],"sourceRoot":"assets/scripts/"}