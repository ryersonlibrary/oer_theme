{"version":3,"sources":["../assets/scripts/find.js"],"names":["$","DiscoveryController","discoveryObj","controller","CriteriaSelectionController","facets","queue","PaginationController","nextPage","previousPage","pageMarkers","HTMLPaginationController","HTMLSearchBox","HTMLCriteriaController","find","initUI","self","each","facet","data","undefined","initfnc","ucfirst","bind","event","preventDefault","item","toggleClass","removeAttr","siblings","setAttribute","submit","input","val","length","attr","keyCode","which","values","push","op","replace","split","enqueue","stateChange","DiscoveryView","items","HTMLView","view","stage","titleStage","templates","parseTemplates","twrapper","html","remove","template","processed","match","forEach","token","key","replaceAll","append","processTokens","book_capsule","ECommonsOntarioCriteriaController","ECommonsOntarioHTMLView","discoveryObject","DiscoveryDataHandler","dbURI","dbmethod","dburl","paths","build_paths","query","XHROpts","resetXHROpts","results","parameter","value","operator","Parameter","term","limit","offset","async","method","traditional","crossOrigin","error","xhrError","success","xhrResultsHandler","opt","setXHROpt","makeURL","filtered_items","path","retrieve","processResults","ajax","extend","xhr","ajaxOptions","thrownError","console","log","textStatus","jqXHR","list","item_metadata","find_by_metadata","filtered_collections","collection","DSpaceDataHandler","expansion","filters","fields","name","setQueryParameter","i","uuid","subject","byline","title","metadata","j","md","prop","join","serializeDisplayString","subjects","output","replaceLast","setAdditionalParameter","collectionID","filter","expandQuery","item_bitstreams","bitstreams","item_policy","content","schemas","field","Discovery","dataOpQueue","criteriaController","retrieveData","extractItems","setItems","displayQueryResults","resetQueryParameters","resetDataParameters","apply","performQuery","getResults","ECommonsOntarioDiscovery","vars","paginationController","includeMetaData","document","ready","discovery","jQuery","String","prototype","charAt","toUpperCase","slice","search","replacement","target","RegExp","index","lastIndexOf","substring","toString"],"mappings":"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","file":"find.js","sourcesContent":["/* jshint latedef:nofunc */\n//needed for function hoisting for build \n\n(function($) {\n  \n    /* DISCOVERY CONTROLLER CLASS */\n    \n    // Core Controller Class\n    \n    class DiscoveryController {\n      constructor(discoveryObj) {\n        this.discoveryObj = discoveryObj;\n        this.controller = null;\n      }  \n            \n      submit() {\n        \n      }\n      \n    }\n    \n    // Manages UIs that submit filter criteria.\n    \n    class CriteriaSelectionController extends DiscoveryController {\n      constructor(discoveryObj) {\n        super(discoveryObj);\n        this.facets = null;\n        this.queue = [];\n      }\n      \n      enqueue() {\n        \n      }\n    }\n    \n    // Manages Pagination UIs.\n    \n    class PaginationController extends DiscoveryController {\n      constructor(discoveryObj) {\n        super(discoveryObj);\n        this.nextPage = null;\n        this.previousPage = null;\n        this.pageMarkers = null;\n      }\n    }\n    \n    // Manages HTML5-Based Pagination UIs\n    \n    class HTMLPaginationController extends PaginationController {\n      constructor(discoveryObj) {\n        super(discoveryObj);\n      }\n    }\n    \n    // Manages standalone Search Box UIs\n    \n    class HTMLSearchBox extends CriteriaSelectionController {\n      constructor(discoveryObj) {\n        super(discoveryObj);\n      }\n    }\n        \n    /* !HTMLUIController */\n        \n    class HTMLCriteriaController extends CriteriaSelectionController {\n      constructor(discoveryObj) {\n        super(discoveryObj);\n        this.controller = $(\"[data-widget='discovery-controller']\");\n        this.facets = this.controller.find(\"[data-facet]\");\n        this.initUI();\n      }\n      \n      initUI() {\n        var self = this;\n        \n        /* \n           Allows us to define widget initialization methods based on the ui-type.\n           Methods are in the form init[ui-type], with ui-type capitalized.\n           \n           Initialization functions are responsible for the following:\n           - Binding the appropriate change event (e.g. a click for a list or change for a selection). \n           - Adding its parent facet to the query queue by assigning it a 'data-enqueue' attribute.\n           - Adding a 'data-selected' attribute to any selected item.\n           - Resetting the facet if a user selects an “all” or “none” value, indicated in the controller by a '*' data-value.\n           - Firing the controller’s submit method.\n           - Performing any UX event modifications (such as preventing default link behaviour on link lists).\n        */\n        \n        this.facets.each(function() {\n          var facet = $(this);\n          if (typeof facet.data('ui-type') === undefined) { return; }\n          var initfnc = \"init\" + facet.data('ui-type').ucfirst();\n          if (typeof self[initfnc] !== 'function') { return; }\n          self[initfnc](facet);\n        });\n      }\n                  \n      initList(facet) {\n        var self = this;\n        facet.find('[data-user-input-wrapper]').find('li').each(function() {\n          $(this).bind('click',function(event) {\n            event.preventDefault();\n            var item = $(this);\n            item.toggleClass('selected');\n            if (item.data('value') === '*') {\n              facet.removeAttr('data-enqueue');\n              item.siblings('li').removeAttr('data-selected');\n            } else {\n              facet[0].setAttribute('data-enqueue',''); // Use native JS to set boolean attribute\n              item[0].setAttribute('data-selected',''); \n            }\n            self.submit();\n          });\n        });        \n      }\n      \n      initTextfield(facet) {\n        var self = this;\n        facet.find('[data-user-input]').each(function() {\n          $(this).bind('keypress',function(event) {\n            var input = $(this);\n            if(input.val().length > 2) { // Don’t submit if there are less than three characters in the text field\n              facet[0].setAttribute('data-enqueue',''); // Use native JS to set boolean attribute\n              input[0].setAttribute('data-selected','');\n              input.attr('data-value',input.val());\n              self.submit();\n            } else {\n              facet.removeAttr('data-enqueue');\n              input.removeAttr('data-selected');\n            }\n          })\n          .bind('keypress', function(event) { // intercepts return character which would otherwise \"submit\" the form\n            if ((event.keyCode ? event.keyCode : event.which) === 13) {\n              self.submit();\n              return false;\n            } else { \n              return true;\n            }\n          });\n        });\n      }   \n      \n      /* \n          Adds a list of data retrieval objects to the queue. Data retrieval objects contain a\n          data op (corresponding to a method of the data object) and values corresponding to its\n          arguments.\n      */   \n      \n      enqueue() {\n        var self = this;\n        this.queue = [];\n        this.controller.find('[data-enqueue]').each(function() {\n          var facet = $(this);\n          var values = [];\n          facet.find('[data-selected]').each(function() {\n            self.queue.push(\n              {\n                op: facet.data('op'),\n                values: facet.data('param').replace('%%',$(this).attr('data-value')).split('|')\n              }\n            );\n          });\n          \n        });\n      }\n      \n      submit() {\n        super.submit();\n        this.enqueue();\n        this.discoveryObj.stateChange();\n      }\n      \n      \n    }\n    \n    /* !DISCOVERY VIEW CLASS */\n    \n    class DiscoveryView {\n      contructor(discoveryObj) {\n        this.items = [];\n      }\n      \n      setItems(items) {\n        this.items = items;\n        return this;\n      }\n      \n      displayQueryResults() {\n\n      }\n    }\n    \n    \n    /* !HTML VIEW CLASS */\n    \n    \n    // Displays results on HTML5 Stage\n    \n    class HTMLView extends DiscoveryView {\n      constructor(discoveryObj) {\n        super(discoveryObj);\n        this.view = $('[data-view-results]');\n        this.stage = this.view.find('[data-view-stage]');\n        this.titleStage = this.view.find('[data-view-title-stage]');\n        this.templates = {};\n        \n        this.parseTemplates();        \n      }\n      \n      // Finds templates in the DOM and adds them to the templates object.\n      // Templates are designated in the DOM by a [data-view-template-wrapper] boolean attribute.\n      // This script expects that each wrapper have [data-template-name], which will be used as\n      // an object property. The template block is then removed from the DOM.\n      \n      parseTemplates() {\n        var self = this;\n        var templates = this.view.find('[data-view-templates]');\n        templates.find('[data-view-template-wrapper]').each(function(){\n          var twrapper = $(this);\n          self.templates[twrapper.data('view-template-name')] = twrapper.html();\n        })\n        .remove();\n      }\n      \n      // Tokens are processed as follows:  \n      // %%DataKey%%\n      \n      processTokens(template,item) {\n        var processed = template;\n        template.match(/\\%\\%[^\\%]*\\%\\%/g).forEach(function(token) {\n          var key = token.replaceAll('%%','');\n          processed = processed.replaceAll(token,item.values[key]);\n        });\n        \n        return processed;\n      }\n      \n      displayQueryResults() {\n        var self = this;\n        self.stage.html('');\n        \n        this.items.forEach(function(item) {\n          self.stage.append(self.processTokens(self.templates.book_capsule,item));\n        });\n      }\n    }\n    \n    // Displays controller particular to the ECommonsOntario site\n    \n    class ECommonsOntarioCriteriaController extends HTMLCriteriaController {\n      constructor(discoveryObj) {\n        super(discoveryObj);\n      }\n    }\n    \n    // Displays results particular to the ECommonsOntario site\n    \n    class ECommonsOntarioHTMLView extends HTMLView {\n      constructor(discoveryObject) {\n        super(discoveryObject);\n      }\n    }\n        \n    /* !DATA HANDLER */\n    \n    class DiscoveryDataHandler {\n      constructor(dbURI, dbmethod) {\n        this.dburl = dbmethod + '://' + dbURI;\n        this.paths = this.build_paths();\n        this.query = {};\n        this.XHROpts = this.resetXHROpts();\n        this.results = {};\n                \n      }\n      \n      resetQueryParameters() {\n        this.query = {};\n      }\n  \n      // Placeholder. Will be particualar to database implementation. \n      \n      setQueryParameter(parameter,value,operator='like') {\n        this.query[Parameter] = value;\n        return this;  \n      }\n      \n      // Placeholder. Will be particular to database implementation\n      \n      setSearchTerm(term,operator='contains') {\n        return this;\n      }\n      \n      // Placeholder. Will be particular to database implementation\n      \n      setDateIssed(value,operator='<') {\n        return this;\n      }\n      \n      // Placeholder. Will be particualar to database implementation. \n      \n      setLimit(limit,offset) {\n        return this;\n      }      \n      \n      // A wrapper for the query Parameter\n      \n      getQuery() {\n        return this.query;\n      }\n      \n      // Sets default options for the AJAX call.\n      \n      resetXHROpts() {\n        this.XHROpts = {\n          async: false,\n          method: \"GET\", // default\n          traditional: true,\n          crossOrigin: true,\n          error: this.xhrError,\n          success: this.xhrResultsHandler\n        };\n      }\n      \n      // Set AJAX option as per http://api.jquery.com/jquery.ajax/\n      \n      setXHROpt(opt,value) {\n        this.XHROpts[opt] = value;\n        return this;\n      }\n      \n      // Wrapper that returns AJAX options\n      \n      getXHROpts() {\n        return this.XHROpts;\n      }\n      \n      // Performs filtered query\n      \n      performQuery() {\n        this.resetXHROpts();\n        this\n          .setXHROpt('url',this.makeURL(this.paths.query.filtered_items.path))\n          .setXHROpt('method',this.paths.query.filtered_items.method)\n          .setXHROpt('data',this.query);  \n        this.retrieve(); \n        return this;     \n      }\n      \n      processResults() {\n        \n      }\n      \n      getResults() {\n        this.processResults();\n        return this.results;\n      }\n      \n      makeURL(path) {\n        return this.dburl + \"/\" + path;\n      }\n      \n      /* ! -- AJAX call */\n      \n      /*\n        A number of things are going on here. The data results need to be scoped to the object instance so the success\n        a function expression was needed. The $.extend method allows us to do this and retain our this.XHROpts property.\n        The success parameter is passed an array, which calls a second method for post-processing.\n      */ \n                \n      retrieve() {\n        var self = this;\n        $.ajax($.extend(this.XHROpts,{success: [function(data) { self.results = data; },self.xhrResultsHandler]}));\n      }\n      \n      xhrError(xhr, ajaxOptions, thrownError) {\n        console.log('error');\n        console.log(xhr);\n        console.log(thrownError);\n      }\n      \n      // called after a successful ajax request \n      \n      xhrResultsHandler(data,textStatus,jqXHR) {\n      \n      }\n      \n      // see DSpace Handler for an extended implementation\n      \n      build_paths() {\n        return {\n          items: {\n            list: {                              // Returns a list of items\n              method: \"GET\",\n              path:     \"[path]\", \n              },                              \n            item: {                               // Returns a single item with ID %%\n              method: \"GET\",\n              path:     \"[path]/%%\"\n              },                           \n            item_metadata: {                      // Returns metadata for item %%\n              method: \"GET\",\n              path:     \"[path]/%%/[key]\",  \n              },       \n            find_by_metadata: {                   // Returns items based on specified metadata value\n              method: \"POST\",\n              path:     \"[path]\"\n            }     \n          },\n          query: {  \n            filtered_items: {                     // Returns items based on chosen filters\n              method: \"GET\",\n              path:     \"[path]\",  \n              },           \n            filtered_collections: {               // Returns collections based on chosen filters\n              method: \"GET\",\n              path:     \"[path]\",\n              }, \n            collection: {                         // Returns collection with ID %%\n              method: \"GET\",\n              path:     \"[path]/%%\",\n              }         \n          }\n        };\n      }\n    }\n    \n    /* !DSPACE HANDLER */\n    \n    class DSpaceDataHandler extends DiscoveryDataHandler {\n      constructor(dbURI, dbmethod) {\n        super(dbURI, dbmethod);\n        this.query = [];\n        this.expansion = []; // expands the dataset\n        this.filters = [];  // adds filters\n        this.fields = []; // fields to show\n      }\n      \n      resetQueryParameters() {\n        this.query = [];\n      }\n  \n      /* \n        \n        Available operators:\n        \n        exists\n        doesnt_exist\n        equals\n        not_equals\n        like\n        not_like\n        contains\n        doesnt_contain\n        matches\n        doesnt_match\n    \n      */\n\n      \n      setQueryParameter(parameter,value,operator='like') {\n        \n        this.query.push({\n          name:   \"query_field[]\",\n          value:  parameter\n        });\n        \n        this.query.push({\n          name:   \"query_op[]\",\n          value:  operator\n        });\n        \n        this.query.push({\n          name:   \"query_val[]\",\n          value:  value\n        });\n        \n        return this;  \n      }\n      \n      // A search term is general across all metadata\n      \n      setSearchTerm(value,operator='contains') {\n        this.setQueryParameter('*',value,operator);\n        return this;\n      }\n      \n      processResults() {\n        super.processResults();\n        var self = this;\n        var items = this.results.items;\n        \n        for(var i=0; i<items.length; i++) {\n          var item = this.results.items[i];\n          \n          // Set default values.\n                  \n          var values = {\n            uuid: item.uuid,\n            subject: '',\n            byline: '',\n            title: ''\n          };\n          \n          if (typeof item.metadata !== \"undefined\") {\n            for(var j=0; j<item.metadata.length; j++) {\n              var md = item.metadata[j];\n              var key = md.key;\n              if (typeof values[key] === \"undefined\") {\n                values[key] = [];\n              }\n              values[key].push(md.value);\n            }\n          }\n          \n          // Join multiple values as single string\n          \n          for(var prop in values) {\n            if (values[prop] === \"undefined\" || typeof values[prop] !== 'object') {\n              values[prop] = '';\n            } else {\n              values[prop] = values[prop].join('%%');\n            }\n          }\n          \n\n          \n          // Process contributors\n          values.byline = self.serializeDisplayString(values,'dc.contributor.author');\n          values.subjects = self.serializeDisplayString(values,'dc.subject');\n          \n          this.results.items[i].values = values;\n        }\n      }\n      \n      serializeDisplayString(values,key) {\n        var output = '';\n        \n        if (typeof values[key] !== \"undefined\") {\n          output = values[key].replaceAll('%%',', ');\n          output = output.replaceLast(',',' and');\n        }\n        \n        return output;\n      }\n      \n      setAdditionalParameter(parameter,value) {\n        this.query.push({\n          name: parameter,\n          value: value\n          });\n        return this;\n      }\n      \n      // TO DO\n      \n      setDateIssed(term,operator='<') {\n        return this;\n      }\n      \n      // Rudimentary. Will be particualar to database implementation. \n      \n      setLimit(limit=100,offset=0) {\n        this\n          .setAdditionalParameter('limit',limit)\n          .setAdditionalParameter('offset',offset);\n        return this;\n      }\n      \n      setCollection(collectionID) {\n        this.setAdditionalParameter('collSel[]',collectionID);\n        return this;\n      }\n      \n      /*  Expands the returned dataset. \n        \n          Some values:\n            metadata\n            bitstreams\n            parentCollection\n            parentCollectionList\n            parentCommunityList\n      */\n            \n      expandQuery(expansion) {\n        this.expansion.push(expansion);\n        this.setAdditionalParameter('expand',this.expansion.join(','));\n        return this;\n      }\n      \n      // Filters the dataset. Exanmples include 'is_withdrawn' or 'is_discoverable'\n      \n      filterQuery(filter) {\n        this.filters.push(filter);\n        this.setAdditionalParameter('expand',this.filters.join(','));\n        return this;\n      }\n      \n      // A shortcut to include metadata in results\n      \n      includeMetaData() {\n        this.expandQuery('metadata');\n        return this;\n      }\n      \n      // A shortcut to include bitstreams in results\n      \n      includeBitstreams() {\n        this.expandQuery('bitstreams');\n        return this;\n      }\n            \n      // Builds DSpace-specific paths\n      // TO DO: Build this into a common schema for all storage devices\n      \n      build_paths() {\n        return {\n          items: {\n            list: {                              // Returns a list of items\n              method: \"GET\",\n              path:     \"items\", \n              },                              \n            item: {                               // Returns a single item with ID %%\n              method: \"GET\",\n              path:     \"items/%%\"\n              },                           \n            item_metadata: {                      // Returns metadata for item %%\n              method: \"GET\",\n              path:     \"items/%%/metadata\",  \n              },       \n            item_bitstreams: {                    // Returns available bitstreams for item %%\n              method: \"GET\",\n              path:     \"items/%%/bitstreams\"  \n              },\n            find_by_metadata: {                   // Returns items based on specified metadata value\n              method: \"POST\",\n              path:     \"items/find-by-metadata-field\"\n            }     \n          },\n          query: {  \n            filtered_items: {                     // Returns items based on chosen filters\n              method: \"GET\",\n              path:     \"filtered-items\",  \n              },           \n            filtered_collections: {               // Returns collections based on chosen filters\n              method: \"GET\",\n              path:     \"filtered-collections\",\n              }, \n            collection: {                         // Returns collection with ID %%\n              method: \"GET\",\n              path:     \"filtered-collections/%%\",\n              }         \n          },\n          bitstreams: { \n            list: {                               // Returns all bitstreams in DSpace\n              method: \"GET\",\n              path:     \"bitsreams\"\n            },\n            item: {                               // Returns an item with bitstream ID %%\n              method: \"GET\",\n              path:     \"bitstreams/{%%}\"\n            },\n            item_policy: {                        // Returns the policy for a bitstream with ID %%\n              method: \"GET\",\n              path:     \"bitstreams/%%/policy\"\n            },\n            content: {                             // Retrieve content for a bitstream with ID %%\n              method:  \"GET\",\n              path:      \"bitstreams/%%/retrieve\"\n            }\n          },\n          schemas: {\n            list: {                               // Returns a list of all schemas\n              method: \"GET\",\n              path:     \"registries/schema\"\n            },\n            item: {                               // Returns a metadata schema with schema prefix %%\n              method: \"GET\",\n              path:     \"registries/schema/%%\"\n            },\n            field: {                              // Returns a metadata schema with field ID %%\n              method: \"GET\",\n              path:     \"registries/metadata-fields/%%\"\n            }\n          }\n        };\n      }\n      \n    }\n    \n    /* !DISCOVERY CLASS */\n    \n    class Discovery {\n      constructor() {\n        this.dataOpQueue = [];\n        this.results = {};\n        this.items = [];\n        this.view = {};\n        \n        /* Example:\n          this.criteriaController = new ECommonsOntarioCriteriaController(this);\n          this.paginationController = new HTMLPaginationController(this);\n          this.view = new ECommonsOntarioHTMLView(this);\n          this.data = new DSpaceDataHandler(vars.dbURI, vars.dbmethod);\n        */\n      }\n      \n      // fired by Controller when it changes state\n      \n      stateChange() {\n        this.dataOpQueue = this.criteriaController.queue;\n        this.retrieveData().extractItems(); // populates this items\n        this.view\n          .setItems(this.items)\n          .displayQueryResults();\n      }\n      \n      // Clears data parameters\n      \n      resetDataParameters() {\n        this.data.resetQueryParameters();\n      }\n      \n      retrieveData() {\n        var self = this;\n        self.resetDataParameters();\n        this.dataOpQueue.forEach(function(item){\n          self.data[item.op].apply(self.data,item.values);\n        });\n        self.results = self.data.performQuery().getResults();\n        return this;\n      }\n      \n      // The Discovery class expects the results object to have an “items” property\n      // containing an array of items.\n      \n      extractItems() {\n        this.items = typeof this.results.items !== undefined ? this.results.items : [];\n        return this;\n      }\n    }\n    \n    /* !ECO DISCOVERY CLASS */\n    /*\n      vars expects:\n      \n      {\n        dbURI:      'books.spi.ryerson.ca/rest',\n        dbmethod:   'https'\n      }\n      \n    */\n    \n    class ECommonsOntarioDiscovery extends Discovery {\n      constructor(vars) {\n        super();\n        this.criteriaController = new ECommonsOntarioCriteriaController(this);\n        this.paginationController = new HTMLPaginationController(this);\n        this.view = new ECommonsOntarioHTMLView(this);\n        this.data = new DSpaceDataHandler(vars.dbURI, vars.dbmethod);\n      }\n      \n      resetDataParameters() {\n        super.resetDataParameters();\n        this.data.includeMetaData();\n      }\n      \n    }\n    \n    /* !DOCUMENT READY */\n    \n    $(document).ready(function() {\n            \n      var discovery = new ECommonsOntarioDiscovery\n        ({\n          dbURI:        'books.spi.ryerson.ca/rest',\n          dbmethod:     'https'\n        });\n      \n      // var results = discovery.data.setSearchTerm('Electrical').includeMetaData().performQuery().getResults();\n      \n    });\n  \n})(jQuery);\n\n// Functions like PHP’s ucfirst()\n\nString.prototype.ucfirst = function() {\n  return this.charAt(0).toUpperCase() + this.slice(1);\n};\n\n// Replaces all instances of a string\n\nString.prototype.replaceAll = function(search, replacement) {\n  var target = this;\n  return target.replace(new RegExp(search, 'g'), replacement);\n};\n\nString.prototype.replaceLast = function(find, replace) {\n  var index = this.lastIndexOf(find);\n\n  if (index >= 0) {\n      return this.substring(0, index) + replace + this.substring(index + find.length);\n  }\n\n  return this.toString();\n};\n\n\n\n"],"sourceRoot":"assets/scripts/"}