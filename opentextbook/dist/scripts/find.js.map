{"version":3,"sources":["../assets/scripts/find.js"],"names":["$","DiscoveryController","discoveryObj","controller","queue","CriteriaSelectionController","facets","PaginationController","HTMLPaginationController","paginator","nextbtn","find","prevbtn","pagebtns","pageIndicator","html","itemLimit","data","currentPage","console","log","setItemLimit","initUI","self","HTMLSearchBox","HTMLCriteriaController","each","facet","undefined","initfnc","ucfirst","bind","event","preventDefault","item","toggleClass","removeAttr","siblings","setAttribute","submit","input","val","length","attr","keyCode","which","values","push","op","replace","split","enqueue","controllerStateChange","DiscoveryView","items","HTMLView","view","stage","titleStage","templates","parseTemplates","twrapper","remove","template","processed","match","forEach","token","key","replaceAll","append","processTokens","book_capsule","ECommonsOntarioCriteriaController","ECommonsOntarioHTMLView","discoveryObject","DiscoveryDataHandler","dbURI","dbmethod","dburl","paths","build_paths","query","resultsComplete","XHROpts","resetXHROpts","results","parameter","value","operator","Parameter","term","limit","page","offset","async","method","error","xhrError","Deferred","opt","prepareQuery","setXHROpt","makeURL","filtered_items","path","retrieve","when","done","ajax","extend","success","textStatus","jqXHR","xhrResultsHandler","processResults","resolve","xhr","ajaxOptions","thrownError","list","item_metadata","find_by_metadata","filtered_collections","collection","DSpaceDataHandler","resetQueryParameters","expansion","filters","fields","name","setQueryParameter","i","uuid","subject","byline","title","metadata","j","md","prop","join","serializeDisplayString","subjects","output","replaceLast","setAdditionalParameter","collectionID","expansionValue","includes","filter","expandQuery","item_bitstreams","bitstreams","item_policy","content","schemas","field","Discovery","dataOpQueue","criteriaController","execute","map","trim","setDataOp","retrieveData","getResults","displayResults","resetDataParameters","apply","executeQuery","setItems","displayQueryResults","ECommonsOntarioDiscovery","vars","paginationController","inboundState","getUrlParameter","decodeURIComponent","newQuery","quickSearch","includeMetaData","document","ready","discovery","jQuery","String","prototype","charAt","toUpperCase","slice","search","replacement","target","RegExp","index","lastIndexOf","substring","toString","sParam","sPageURL","window","location","sURLVariables","sParameterName"],"mappings":"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","file":"find.js","sourcesContent":["/* jshint latedef:nofunc */\n//needed for function hoisting for build \n\n(function($) {\n  \n    /* !DISCOVERY CONTROLLER CLASS */\n    \n    // Core Controller Class\n    \n    class DiscoveryController {\n      constructor(discoveryObj) {\n        this.discoveryObj = discoveryObj;\n        this.controller = null;\n        this.queue = [];\n      }  \n      \n      enqueue() {\n        \n      }\n            \n      submit() {\n        \n      }\n      \n    }\n    \n    // Manages UIs that submit filter criteria.\n    \n    /* !CRITERIA SELECTION CONTROLLER CLASS */\n    \n    class CriteriaSelectionController extends DiscoveryController {\n      constructor(discoveryObj) {\n        super(discoveryObj);\n        this.facets = null;\n      }\n      \n      enqueue() {\n        super.enqueue();\n        \n      }\n    }\n    \n    /* !PAGINATION CONTROLLER CLASS */\n    // Manages Pagination UIs.\n    \n    class PaginationController extends DiscoveryController {\n      constructor(discoveryObj) {\n        super(discoveryObj);\n      }\n      \n      initUI() {\n        \n      }\n    }\n    \n    // Manages HTML5-Based Pagination UIs\n    class HTMLPaginationController extends PaginationController {\n      constructor(discoveryObj) {\n        super(discoveryObj);\n        \n        // Components\n        this.paginator = $('[data-controller-paginator]');\n        this.nextbtn = this.paginator.find('[data-controller-next]');\n        this.prevbtn = this.paginator.find('[data-controller-previous]');\n        this.pagebtns = this.paginator.find('[data-controller-pagebtns]');\n        this.pageIndicator = this.pagebtns.html();\n        \n        // Settings\n        \n        this.itemLimit = this.paginator.data('controller-item-limit');\n        this.currentPage = this.paginator.data('controller-current-page');\n        \n        // Setup\n        \n        console.log('paginator');\n        console.log(this);\n        \n        this.pagebtns.html(''); // Remove page indicator\n        discoveryObj.setItemLimit(this.itemLimit,this.currentPage);\n        \n        this.initUI();\n      }\n      \n      initUI() {\n        super.initUI();\n        \n        var self = this;\n        \n        \n      }\n      \n      \n    }\n    \n    /* !HTML SEARCH BOX CLASS */\n    // Manages standalone Search Box UIs\n    \n    class HTMLSearchBox extends CriteriaSelectionController {\n      constructor(discoveryObj) {\n        super(discoveryObj);\n      }\n    }\n        \n    /* !HTMLUIController */\n        \n    class HTMLCriteriaController extends CriteriaSelectionController {\n      constructor(discoveryObj) {\n        super(discoveryObj);\n        this.controller = $(\"[data-widget='discovery-controller']\");\n        this.facets = this.controller.find(\"[data-facet]\");\n        this.initUI();\n      }\n      \n      initUI() {\n        var self = this;\n        \n        /* \n           Allows us to define widget initialization methods based on the ui-type.\n           Methods are in the form init[ui-type], with ui-type capitalized.\n           \n           Initialization functions are responsible for the following:\n           - Binding the appropriate change event (e.g. a click for a list or change for a selection). \n           - Adding its parent facet to the query queue by assigning it a 'data-enqueue' attribute.\n           - Adding a 'data-selected' attribute to any selected item.\n           - Resetting the facet if a user selects an “all” or “none” value, indicated in the controller by a '*' data-value.\n           - Firing the controller’s submit method.\n           - Performing any UX event modifications (such as preventing default link behaviour on link lists).\n        */\n        \n        this.facets.each(function() {\n          var facet = $(this);\n          if (typeof facet.data('ui-type') === undefined) { return; }\n          var initfnc = \"init\" + facet.data('ui-type').ucfirst();\n          if (typeof self[initfnc] !== 'function') { return; }\n          self[initfnc](facet);\n        });\n      }\n                  \n      initList(facet) {\n        var self = this;\n        facet.find('[data-user-input-wrapper]').find('li').each(function() {\n          $(this).bind('click',function(event) {\n            event.preventDefault();\n            var item = $(this);\n            item.toggleClass('selected');\n            if (item.data('value') === '*') {\n              facet.removeAttr('data-enqueue');\n              item.siblings('li').removeAttr('data-selected');\n            } else {\n              facet[0].setAttribute('data-enqueue',''); // Use native JS to set boolean attribute\n              item[0].setAttribute('data-selected',''); \n            }\n            self.submit();\n          });\n        });        \n      }\n      \n      initTextfield(facet) {\n        var self = this;\n        facet.find('[data-user-input]').each(function() {\n          $(this).bind('keypress',function(event) {\n            var input = $(this);\n            if(input.val().length > 2) { // Don’t submit if there are less than three characters in the text field\n              facet[0].setAttribute('data-enqueue',''); // Use native JS to set boolean attribute\n              input[0].setAttribute('data-selected','');\n              input.attr('data-value',input.val());\n              self.submit();\n            } else {\n              facet.removeAttr('data-enqueue');\n              input.removeAttr('data-selected');\n            }\n          })\n          .bind('keypress', function(event) { // intercepts return character which would otherwise \"submit\" the form\n            if ((event.keyCode ? event.keyCode : event.which) === 13) {\n              self.submit();\n              return false;\n            } else { \n              return true;\n            }\n          });\n        });\n      }   \n      \n      /* \n          Adds a list of data retrieval objects to the queue. Data retrieval objects contain a\n          data op (corresponding to a method of the data object) and values corresponding to its\n          arguments.\n      */   \n      \n      enqueue() {\n        var self = this;\n        this.queue = [];\n        this.controller.find('[data-enqueue]').each(function() {\n          var facet = $(this);\n          var values = [];\n          facet.find('[data-selected]').each(function() {\n            self.queue.push(\n              {\n                op: facet.data('op'),\n                values: facet.data('param').replace('%%',$(this).attr('data-value')).split('|')\n              }\n            );\n          });\n          \n        });\n      }\n      \n      submit() {\n        super.submit();\n        this.enqueue();\n        this.discoveryObj.controllerStateChange();\n      }\n      \n      \n    }\n    \n    /* !DISCOVERY VIEW CLASS */\n    \n    class DiscoveryView {\n      contructor(discoveryObj) {\n        this.items = [];\n      }\n      \n      setItems(items) {\n        this.items = items;\n        return this;\n      }\n            \n      displayQueryResults() {\n\n      }\n    }\n    \n    \n    /* !HTML VIEW CLASS */\n    \n    \n    // Displays results on HTML5 Stage\n    \n    class HTMLView extends DiscoveryView {\n      constructor(discoveryObj) {\n        super(discoveryObj);\n        this.view = $('[data-view-results]');\n        this.stage = this.view.find('[data-view-stage]');\n        this.titleStage = this.view.find('[data-view-title-stage]');\n        this.templates = {};\n        this.parseTemplates();        \n      }\n      \n      // Finds templates in the DOM and adds them to the templates object.\n      // Templates are designated in the DOM by a [data-view-template-wrapper] boolean attribute.\n      // This script expects that each wrapper have [data-template-name], which will be used as\n      // an object property. The template block is then removed from the DOM.\n      \n      parseTemplates() {\n        var self = this;\n        var templates = this.view.find('[data-view-templates]');\n        templates.find('[data-view-template-wrapper]').each(function(){\n          var twrapper = $(this);\n          self.templates[twrapper.data('view-template-name')] = twrapper.html();\n        })\n        .remove();\n      }\n      \n      // Tokens are processed as follows:  \n      // %%DataKey%%\n      \n      processTokens(template,item) {\n        var processed = template;\n        template.match(/\\%\\%[^\\%]*\\%\\%/g).forEach(function(token) {\n          var key = token.replaceAll('%%','');\n          processed = processed.replaceAll(token,item.values[key]);\n        });\n        \n        return processed;\n      }\n      \n      displayQueryResults() {\n        var self = this;\n        self.stage.html('');\n        this.items.forEach(function(item) {\n          self.stage.append(self.processTokens(self.templates.book_capsule,item));\n        });\n      }\n    }\n    \n    // Displays controller particular to the ECommonsOntario site\n    \n    class ECommonsOntarioCriteriaController extends HTMLCriteriaController {\n      constructor(discoveryObj) {\n        super(discoveryObj);\n      }\n    }\n    \n    // Displays results particular to the ECommonsOntario site\n    \n    class ECommonsOntarioHTMLView extends HTMLView {\n      constructor(discoveryObject) {\n        super(discoveryObject);\n      }\n    }\n        \n    /* !DATA HANDLER */\n    \n    class DiscoveryDataHandler {\n      constructor(dbURI, dbmethod) {\n        this.dburl = dbmethod + '://' + dbURI;\n        this.paths = this.build_paths();\n        this.query = {};\n        this.resultsComplete = null;\n        this.XHROpts = this.resetXHROpts();\n        this.results = {};\n      }\n            \n      resetQueryParameters() {\n        this.query = {};\n      }\n  \n      // Placeholder. Will be particualar to database implementation. \n      \n      setQueryParameter(parameter,value,operator='like') {\n        this.query[Parameter] = value;\n        return this;  \n      }\n      \n      // Placeholder. Will be particular to database implementation\n      \n      setSearchTerm(term,operator='matches') {\n        return this;\n      }      \n      // Placeholder. Will be particular to database implementation\n      \n      setDateIssed(value,operator='<') {\n        return this;\n      }\n      \n      // Placeholder. Will be particualar to database implementation. \n      \n      setItemLimit(limit,page) {\n        var offset= limit * (page - 1);\n        return this;\n      }      \n      \n      // A wrapper for the query Parameter\n      \n      getQuery() {\n        return this.query;\n      }\n      \n      // Sets default options for the AJAX call.\n      \n      resetXHROpts() {\n        this.XHROpts = {\n          async: true,\n          method: \"GET\", // default\n          //traditional: true,\n          //crossOrigin: true,\n          error: this.xhrError,\n        };\n        \n        this.resultsComplete= $.Deferred();\n      }\n      \n      // Set AJAX option as per http://api.jquery.com/jquery.ajax/\n      \n      setXHROpt(opt,value) {\n        this.XHROpts[opt] = value;\n        return this;\n      }\n      \n      // Wrapper that returns AJAX options\n      \n      getXHROpts() {\n        return this.XHROpts;\n      }\n      \n      // Performs filtered query\n      \n      executeQuery() {\n        this.resetXHROpts();\n        this.prepareQuery();\n        this\n          .setXHROpt('url',this.makeURL(this.paths.query.filtered_items.path))\n          .setXHROpt('method',this.paths.query.filtered_items.method)\n          .setXHROpt('data',this.query);  \n        this.retrieve(); \n        return this;     \n      }\n      \n      processResults() {\n        var self = this;\n        $.when(this.resultsComplete).done(function() {\n          \n        });\n      }\n      \n      // A shortcut to the results. Can only be called when this.resultsComplete is resolved.\n      \n      getResults() {\n        return this.results;\n      }\n      \n      makeURL(path) {\n        return this.dburl + \"/\" + path;\n      }\n      \n      /* ! -- AJAX call */\n                      \n      retrieve() {\n        var self = this;\n        $.ajax($.extend(this.XHROpts,\n          {\n            success: \n              function(data,textStatus,jqXHR) { \n                self.results = data; \n                self.xhrResultsHandler(data,textStatus,jqXHR,self);\n                self.processResults();\n                self.resultsComplete.resolve(); \n              },\n          }\n        ));\n      }\n      \n      xhrError(xhr, ajaxOptions, thrownError) {\n        console.log('error');\n        console.log(xhr);\n        console.log(thrownError);\n      }\n      \n      // called after a successful ajax request \n      // marks resultsComplete as resolve.\n      \n      xhrResultsHandler(data,textStatus,jqXHR,self) {\n      \n      }\n      \n      // see DSpace Handler for an extended implementation\n      \n      build_paths() {\n        return {\n          items: {\n            list: {                              // Returns a list of items\n              method: \"GET\",\n              path:     \"[path]\", \n              },                              \n            item: {                               // Returns a single item with ID %%\n              method: \"GET\",\n              path:     \"[path]/%%\"\n              },                           \n            item_metadata: {                      // Returns metadata for item %%\n              method: \"GET\",\n              path:     \"[path]/%%/[key]\",  \n              },       \n            find_by_metadata: {                   // Returns items based on specified metadata value\n              method: \"POST\",\n              path:     \"[path]\"\n            }     \n          },\n          query: {  \n            filtered_items: {                     // Returns items based on chosen filters\n              method: \"GET\",\n              path:     \"[path]\",  \n              },           \n            filtered_collections: {               // Returns collections based on chosen filters\n              method: \"GET\",\n              path:     \"[path]\",\n              }, \n            collection: {                         // Returns collection with ID %%\n              method: \"GET\",\n              path:     \"[path]/%%\",\n              }         \n          }\n        };\n      }\n    }\n    \n    /* !DSPACE HANDLER */\n    \n    class DSpaceDataHandler extends DiscoveryDataHandler {\n      constructor(dbURI, dbmethod) {\n        super(dbURI, dbmethod);\n        this.resetQueryParameters();\n      }\n      \n      resetQueryParameters() {\n        this.query = [];\n        this.expansion = []; // expands the dataset\n        this.filters = [];  // adds filters\n        this.fields = []; // fields to show\n      }\n  \n      /* \n        \n        Available operators:\n        \n        exists\n        doesnt_exist\n        equals\n        not_equals\n        like\n        not_like\n        contains\n        doesnt_contain\n        matches\n        doesnt_match\n    \n      */\n\n      setQueryParameter(parameter,value,operator='like') {\n        \n        this.query.push({\n          name:   \"query_field[]\",\n          value:  parameter\n        });\n        \n        this.query.push({\n          name:   \"query_op[]\",\n          value:  operator\n        });\n        \n        this.query.push({\n          name:   \"query_val[]\",\n          value:  value\n        });\n        \n        return this;  \n      }\n      \n      // Handles any special processing\n      \n      prepareQuery() {\n\n      }\n      \n      // A search term is general across all metadata\n      // Note: the “matches” operator alongside framing wildcards (“*value*”) returns a general case-insensitive result.\n      \n      setSearchTerm(value,operator='matches') {\n        this.setQueryParameter('*','(?i).*' + value + '*',operator);\n        return this;\n      }\n      \n      // called after a successful ajax request \n      \n      xhrResultsHandler(data,textStatus,jqXHR) {\n        super.xhrResultsHandler(data,textStatus,jqXHR);\n        if (typeof this.results.items === 'undefined') {\n          this.results.items = [];\n        }\n      }\n      \n      processResults() {\n        super.processResults();\n        var self = this;\n        for(var i=0; i<self.results.items.length; i++) {\n          var item = self.results.items[i];\n          \n          // Set default values.\n                  \n          var values = {\n            uuid: item.uuid,\n            subject: '',\n            byline: '',\n            title: ''\n          };\n          \n          if (typeof item.metadata !== \"undefined\") {\n            for(var j=0; j<item.metadata.length; j++) {\n              var md = item.metadata[j];\n              var key = md.key;\n              if (typeof values[key] === \"undefined\") {\n                values[key] = [];\n              }\n              values[key].push(md.value);\n            }\n          }\n          \n          // Join multiple values as single string\n          \n          for(var prop in values) {\n            if (values[prop] === \"undefined\" || typeof values[prop] !== 'object') {\n              values[prop] = '';\n            } else {\n              values[prop] = values[prop].join('%%');\n            }\n          }\n                      \n          // Process contributors\n          values.byline = self.serializeDisplayString(values,'dc.contributor.author');\n          values.subjects = self.serializeDisplayString(values,'dc.subject');\n          \n          self.results.items[i].values = values;\n        }\n      }\n      \n      serializeDisplayString(values,key) {\n        var output = '';\n        \n        if (typeof values[key] !== \"undefined\") {\n          output = values[key].replaceAll('%%',', ');\n          output = output.replaceLast(',',' and');\n        }\n        \n        return output;\n      }\n      \n      setAdditionalParameter(parameter,value) {\n        this.query.push({\n          name: parameter,\n          value: value\n          });\n        return this;\n      }\n      \n      // TO DO\n      \n      setDateIssed(term,operator='<') {\n        return this;\n      }\n            \n      setItemLimit(limit=6,page=1) {\n        var offset= limit * (page - 1);\n        this\n          .setAdditionalParameter('limit',limit)\n          .setAdditionalParameter('offset',offset);\n        return this;\n      }\n      \n      setCollection(collectionID) {\n        this.setAdditionalParameter('collSel[]',collectionID);\n        return this;\n      }\n      \n      /*  Expands the returned dataset. \n        \n          Some values:\n            metadata\n            bitstreams\n            parentCollection\n            parentCollectionList\n            parentCommunityList\n      */\n            \n      expandQuery(expansionValue) {\n        if (this.expansion.includes(expansionValue) === false) {\n          this.expansion.push(expansionValue);\n          this.setAdditionalParameter('expand',this.expansion.join(','));\n        }\n        return this;\n      }\n      \n      // Filters the dataset. Exanmples include 'is_withdrawn' or 'is_discoverable'\n      \n      filterQuery(filter) {\n        this.filters.push(filter);\n        this.setAdditionalParameter('expand',this.filters.join(','));\n        return this;\n      }\n      \n      // A shortcut to include metadata in results\n      \n      includeMetaData() {\n        this.expandQuery('metadata');\n        return this;\n      }\n      \n      // A shortcut to include bitstreams in results\n      \n      includeBitstreams() {\n        this.expandQuery('bitstreams');\n        return this;\n      }\n            \n      // Builds DSpace-specific paths\n      // TO DO: Build this into a common schema for all storage devices\n      \n      build_paths() {\n        return {\n          items: {\n            list: {                              // Returns a list of items\n              method: \"GET\",\n              path:     \"items\", \n              },                              \n            item: {                               // Returns a single item with ID %%\n              method: \"GET\",\n              path:     \"items/%%\"\n              },                           \n            item_metadata: {                      // Returns metadata for item %%\n              method: \"GET\",\n              path:     \"items/%%/metadata\",  \n              },       \n            item_bitstreams: {                    // Returns available bitstreams for item %%\n              method: \"GET\",\n              path:     \"items/%%/bitstreams\"  \n              },\n            find_by_metadata: {                   // Returns items based on specified metadata value\n              method: \"POST\",\n              path:     \"items/find-by-metadata-field\"\n            }     \n          },\n          query: {  \n            filtered_items: {                     // Returns items based on chosen filters\n              method: \"GET\",\n              path:     \"filtered-items\",  \n              },           \n            filtered_collections: {               // Returns collections based on chosen filters\n              method: \"GET\",\n              path:     \"filtered-collections\",\n              }, \n            collection: {                         // Returns collection with ID %%\n              method: \"GET\",\n              path:     \"filtered-collections/%%\",\n              }         \n          },\n          bitstreams: { \n            list: {                               // Returns all bitstreams in DSpace\n              method: \"GET\",\n              path:     \"bitsreams\"\n            },\n            item: {                               // Returns an item with bitstream ID %%\n              method: \"GET\",\n              path:     \"bitstreams/{%%}\"\n            },\n            item_policy: {                        // Returns the policy for a bitstream with ID %%\n              method: \"GET\",\n              path:     \"bitstreams/%%/policy\"\n            },\n            content: {                             // Retrieve content for a bitstream with ID %%\n              method:  \"GET\",\n              path:      \"bitstreams/%%/retrieve\"\n            }\n          },\n          schemas: {\n            list: {                               // Returns a list of all schemas\n              method: \"GET\",\n              path:     \"registries/schema\"\n            },\n            item: {                               // Returns a metadata schema with schema prefix %%\n              method: \"GET\",\n              path:     \"registries/schema/%%\"\n            },\n            field: {                              // Returns a metadata schema with field ID %%\n              method: \"GET\",\n              path:     \"registries/metadata-fields/%%\"\n            }\n          }\n        };\n      }\n      \n    }\n    \n    /* !DISCOVERY CLASS */\n    \n    class Discovery {\n      constructor() {\n        this.dataOpQueue = [];\n        this.results = {};\n        this.items = [];\n        this.view = {};\n        this.itemLimit = 6;\n        this.page = 1;\n        \n        /* Example:\n          this.criteriaController = new ECommonsOntarioCriteriaController(this);\n          this.paginationController = new HTMLPaginationController(this);\n          this.view = new ECommonsOntarioHTMLView(this);\n          this.data = new DSpaceDataHandler(vars.dbURI, vars.dbmethod);\n        */\n      }\n      \n      inboundState() {\n        \n      }\n            \n      // fired by Controller when it changes state\n      \n      controllerStateChange() {\n        this.dataOpQueue = this.criteriaController.queue;\n        this.execute();\n      }\n      \n      setItemLimit(limit,page) {\n        this.itemLimit = limit;\n        this.page = page;\n        this.data.setItemLimit(this.itemLimit,this.page);\n      }\n            \n      setDataOp(op,values) {\n\n        // remove spaces from values\n                \n        values = values.map(function(val){\n          val = val.trim();\n          return val;\n        });\n        \n        this.dataOpQueue.push({\n          op: op,\n          values: values\n        });\n      }\n      \n      quickSearch(term) {\n        this.dataOpQueue = [];\n        this.setDataOp('setSearchTerm',[term]);\n        this.execute();\n      }\n            \n      // Clears data parameters\n      \n      resetDataParameters() {\n        this.data.resetQueryParameters();\n        if (this.itemLimit !== 0) {\n          this.data.setItemLimit(this.itemLimit,this.page);\n        }\n      }\n      \n      // retrieves and displays data\n      \n      execute() {\n        var self = this;\n        self.retrieveData();\n        $.when(this.data.resultsComplete).done(function(){\n          self.results = self.data.getResults();\n          self.items = typeof self.results.items !== \"undefined\" ? self.results.items : [];\n          self.displayResults();\n        });\n      }\n      \n      // An Alias for reset Data Parameters\n      \n      newQuery() {\n         this.resetDataParameters();\n      }\n      \n      retrieveData() {\n        var self = this;\n        this.dataOpQueue.forEach(function(item){\n          self.data[item.op].apply(self.data,item.values);\n        });\n        self.data.executeQuery();\n        return this;\n      }      \n      \n      // This function can only be called when this.data.resultsComplete has been resolved.\n      \n      displayResults() {\n        this.view\n          .setItems(this.items)\n          .displayQueryResults();\n      }\n    }\n    \n    /* !ECO DISCOVERY CLASS */\n    /*\n      vars expects:\n      \n      {\n        dbURI:      'books.spi.ryerson.ca/rest',\n        dbmethod:   'https'\n      }\n      \n    */\n    \n    class ECommonsOntarioDiscovery extends Discovery {\n      constructor(vars) {\n        super();\n        this.data = new DSpaceDataHandler(vars.dbURI, vars.dbmethod);\n        this.criteriaController = new ECommonsOntarioCriteriaController(this);\n        this.paginationController = new HTMLPaginationController(this);\n        this.view = new ECommonsOntarioHTMLView(this);\n        console.log('eco');\n        console.log(this);\n        this.inboundState();\n      }\n      \n      // Right now only accepts search paramaters\n      \n      inboundState() {\n        var op = getUrlParameter('op');\n        var value = decodeURIComponent(getUrlParameter('value'));\n        \n        this.newQuery();\n\n        if (op === 'setSearchTerm') {\n          this.quickSearch(value);\n          $('#search-value').val(value);\n        } else {\n          this.setDataOp('setQueryParameter',['dc:language','en']);\n          this.execute();\n        }        \n      }\n      \n      setItemLimit(limit,page) {\n        super.setItemLimit(limit,page);\n      }\n      \n      resetDataParameters() {\n        super.resetDataParameters();\n        this.data.includeMetaData();\n      }\n      \n    }\n    \n    /* !DOCUMENT READY */\n    \n    $(document).ready(function() {\n            \n      var discovery = new ECommonsOntarioDiscovery\n        ({\n          dbURI:        'books.spi.ryerson.ca/rest',\n          dbmethod:     'https'\n        });\n      \n      // var results = discovery.data.setSearchTerm('Electrical').includeMetaData().executeQuery().getResults();\n      \n    });\n  \n})(jQuery);\n\n// Functions like PHP’s ucfirst()\n\nString.prototype.ucfirst = function() {\n  return this.charAt(0).toUpperCase() + this.slice(1);\n};\n\n// Replaces all instances of a string\n\nString.prototype.replaceAll = function(search, replacement) {\n  var target = this;\n  return target.replace(new RegExp(search, 'g'), replacement);\n};\n\nString.prototype.replaceLast = function(find, replace) {\n  var index = this.lastIndexOf(find);\n\n  if (index >= 0) {\n      return this.substring(0, index) + replace + this.substring(index + find.length);\n  }\n\n  return this.toString();\n};\n\n// With thanks to http://www.jquerybyexample.net/2012/06/get-url-parameters-using-jquery.html\n\nfunction getUrlParameter (sParam) {\n    var sPageURL = decodeURIComponent(window.location.search.substring(1)),\n    sURLVariables = sPageURL.split('&'),\n    sParameterName,\n    i;\n\n  for (i = 0; i < sURLVariables.length; i++) {\n    sParameterName = sURLVariables[i].split('=');\n\n    if (sParameterName[0] === sParam) {\n        return sParameterName[1] === undefined ? true : sParameterName[1];\n    }\n  }\n}\n\n\n"],"sourceRoot":"assets/scripts/"}