{"version":3,"sources":["../assets/scripts/find.js"],"names":["$","DiscoveryController","discoveryObj","controller","facets","queue","DiscoveryView","HTMLUIController","find","initUI","self","each","facet","data","undefined","initfnc","ucfirst","bind","event","preventDefault","item","toggleClass","removeAttr","siblings","setAttribute","submit","input","val","length","attr","keyCode","which","values","push","op","replace","split","enqueue","stateChange","HTMLView","viewID","id","PaginatedHTMLView","DiscoveryDataHandler","dbURI","dbmethod","dburl","paths","build_paths","query","XHROpts","resetXHROpts","results","parameter","value","operator","Parameter","term","limit","offset","async","method","traditional","crossOrigin","error","xhrError","success","xhrResultsHandler","opt","setXHROpt","makeURL","filtered_items","path","retrieve","ajax","extend","xhr","ajaxOptions","thrownError","console","log","textStatus","jqXHR","items","list","item_metadata","find_by_metadata","filtered_collections","collection","DSpaceDataHandler","expansion","filters","fields","name","setQueryParameter","setAdditionalParameter","collectionID","join","filter","expandQuery","item_bitstreams","bitstreams","item_policy","content","schemas","field","Discovery","dataOpQueue","retrieveData","resetQueryParameters","resetDataParameters","forEach","apply","performQuery","getResults","ECommonsOntarioDiscovery","vars","view","includeMetaData","document","ready","discovery","jQuery","String","prototype","charAt","toUpperCase","slice"],"mappings":"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","file":"find.js","sourcesContent":["/* jshint latedef:nofunc */\n//needed for function hoisting for build \n\n(function($) {\n    \n    class DiscoveryController {\n      constructor(discoveryObj) {\n        this.discoveryObj = discoveryObj;\n        this.controller = null;\n        this.facets = null;\n        this.queue = [];\n      }  \n      \n      enqueue() {\n        \n      }\n      \n      submit() {\n        \n      }\n      \n    }\n    \n    class DiscoveryView {\n      contructor() {\n        \n      }\n    }\n    \n    /* !HTMLUIController */\n        \n    class HTMLUIController extends DiscoveryController {\n      constructor(discoveryObj) {\n        super(discoveryObj);\n        this.controller = $(\"[data-widget='discovery-controller']\");\n        this.facets = this.controller.find(\"[data-facet]\");\n        this.initUI();\n      }\n      \n      initUI() {\n        var self = this;\n        \n        /* \n           Allows us to define widget initialization methods based on the ui-type.\n           Methods are in the form init[ui-type], with ui-type capitalized.\n           \n           Initialization functions are responsible for the following:\n           - Binding the appropriate change event (e.g. a click for a list or change for a selection). \n           - Adding its parent facet to the query queue by assigning it a 'data-enqueue' attribute.\n           - Adding a 'data-selected' attribute to any selected item.\n           - Resetting the facet if a user selects an “all” or “none” value, indicated in the controller by a '*' data-value.\n           - Firing the controller’s submit method.\n           - Performing any UX event modifications (such as preventing default link behaviour on link lists).\n        */\n        \n        this.facets.each(function() {\n          var facet = $(this);\n          if (typeof facet.data('ui-type') === undefined) { return; }\n          var initfnc = \"init\" + facet.data('ui-type').ucfirst();\n          if (typeof self[initfnc] !== 'function') { return; }\n          self[initfnc](facet);\n        });\n      }\n                  \n      initList(facet) {\n        var self = this;\n        facet.find('[data-user-input-wrapper]').find('li').each(function() {\n          $(this).bind('click',function(event) {\n            event.preventDefault();\n            var item = $(this);\n            item.toggleClass('selected');\n            if (item.data('value') === '*') {\n              facet.removeAttr('data-enqueue');\n              item.siblings('li').removeAttr('data-selected');\n            } else {\n              facet[0].setAttribute('data-enqueue',''); // Use native JS to set boolean attribute\n              item[0].setAttribute('data-selected',''); \n            }\n            self.submit();\n          });\n        });        \n      }\n      \n      initTextfield(facet) {\n        var self = this;\n        facet.find('[data-user-input]').each(function() {\n          $(this).bind('keypress',function(event) {\n            var input = $(this);\n            if(input.val().length > 2) { // Don’t submit if there are less than three characters in the text field\n              facet[0].setAttribute('data-enqueue',''); // Use native JS to set boolean attribute\n              input[0].setAttribute('data-selected','');\n              input.attr('data-value',input.val());\n              self.submit();\n            } else {\n              facet.removeAttr('data-enqueue');\n              input.removeAttr('data-selected');\n            }\n          })\n          .bind('keypress', function(event) { // intercepts return character which would otherwise \"submit\" the form\n            if ((event.keyCode ? event.keyCode : event.which) === 13) {\n              self.submit();\n              return false;\n            } else { \n              return true;\n            }\n          });\n        });\n      }   \n      \n      /* \n          Adds a list of data retrieval objects to the queue. Data retrieval objects contain a\n          data op (corresponding to a method of the data object) and values corresponding to its\n          arguments.\n      */   \n      \n      enqueue() {\n        var self = this;\n        this.queue = [];\n        this.controller.find('[data-enqueue]').each(function() {\n          var facet = $(this);\n          var values = [];\n          facet.find('[data-selected]').each(function() {\n            self.queue.push(\n              {\n                op: facet.data('op'),\n                values: facet.data('param').replace('%%',$(this).attr('data-value')).split('|')\n              }\n            );\n          });\n          \n        });\n      }\n      \n      submit() {\n        super.submit();\n        this.enqueue();\n        this.discoveryObj.stateChange();\n      }\n      \n      \n    }\n    \n    class HTMLView extends DiscoveryView {\n      constructor(viewID) {\n        super();\n        this.id = $(viewID);\n        \n      }\n    }\n    \n    class PaginatedHTMLView extends DiscoveryView {\n      constructor() {\n        super();\n        \n      }\n    }\n    \n    /* !DATA HANDLER */\n    \n    class DiscoveryDataHandler {\n      constructor(dbURI, dbmethod) {\n        this.dburl = dbmethod + '://' + dbURI;\n        this.paths = this.build_paths();\n        this.query = {};\n        this.XHROpts = this.resetXHROpts();\n        this.results = {};\n                \n      }\n      \n      resetQueryParameters() {\n        this.query = {};\n      }\n  \n      // Placeholder. Will be particualar to database implementation. \n      \n      setQueryParameter(parameter,value,operator='like') {\n        this.query[Parameter] = value;\n        return this;  \n      }\n      \n      // Placeholder. Will be particular to database implementation\n      \n      setSearchTerm(term,operator='contains') {\n        return this;\n      }\n      \n      // Placeholder. Will be particular to database implementation\n      \n      setDateIssed(value,operator='<') {\n        return this;\n      }\n      \n      // Placeholder. Will be particualar to database implementation. \n      \n      setLimit(limit,offset) {\n        return this;\n      }      \n      \n      // A wrapper for the query Parameter\n      \n      getQuery() {\n        return this.query;\n      }\n      \n      // Sets default options for the AJAX call.\n      \n      resetXHROpts() {\n        this.XHROpts = {\n          async: false,\n          method: \"GET\", // default\n          traditional: true,\n          crossOrigin: true,\n          error: this.xhrError,\n          success: this.xhrResultsHandler\n        };\n      }\n      \n      // Set AJAX option as per http://api.jquery.com/jquery.ajax/\n      \n      setXHROpt(opt,value) {\n        this.XHROpts[opt] = value;\n        return this;\n      }\n      \n      // Wrapper that returns AJAX options\n      \n      getXHROpts() {\n        return this.XHROpts;\n      }\n      \n      // Performs filtered query\n      \n      performQuery() {\n        this.resetXHROpts();\n        this\n          .setXHROpt('url',this.makeURL(this.paths.query.filtered_items.path))\n          .setXHROpt('method',this.paths.query.filtered_items.method)\n          .setXHROpt('data',this.query);  \n        this.retrieve(); \n        return this;     \n      }\n      \n      getResults() {\n        return this.results;\n      }\n      \n      makeURL(path) {\n        return this.dburl + \"/\" + path;\n      }\n      \n      /* ! -- AJAX call */\n      \n      /*\n        A number of things are going on here. The data results need to be scoped to the object instance so the success\n        a function expression was needed. The $.extend method allows us to do this and retain our this.XHROpts property.\n        The success parameter is passed an array, which calls a second method for post-processing.\n      */ \n                \n      retrieve() {\n        var self = this;\n        $.ajax($.extend(this.XHROpts,{success: [function(data) { self.results = data; },self.xhrResultsHandler]}));\n      }\n      \n      xhrError(xhr, ajaxOptions, thrownError) {\n        console.log('error');\n        console.log(xhr);\n        console.log(thrownError);\n      }\n      \n      // called after a successful ajax request \n      \n      xhrResultsHandler(data,textStatus,jqXHR) {\n      \n      }\n      \n      // see DSpace Handler for an extended implementation\n      \n      build_paths() {\n        return {\n          items: {\n            list: {                              // Returns a list of items\n              method: \"GET\",\n              path:     \"[path]\", \n              },                              \n            item: {                               // Returns a single item with ID %%\n              method: \"GET\",\n              path:     \"[path]/%%\"\n              },                           \n            item_metadata: {                      // Returns metadata for item %%\n              method: \"GET\",\n              path:     \"[path]/%%/[key]\",  \n              },       \n            find_by_metadata: {                   // Returns items based on specified metadata value\n              method: \"POST\",\n              path:     \"[path]\"\n            }     \n          },\n          query: {  \n            filtered_items: {                     // Returns items based on chosen filters\n              method: \"GET\",\n              path:     \"[path]\",  \n              },           \n            filtered_collections: {               // Returns collections based on chosen filters\n              method: \"GET\",\n              path:     \"[path]\",\n              }, \n            collection: {                         // Returns collection with ID %%\n              method: \"GET\",\n              path:     \"[path]/%%\",\n              }         \n          }\n        };\n      }\n    }\n    \n    /* !DSPACE HANDLER */\n    \n    class DSpaceDataHandler extends DiscoveryDataHandler {\n      constructor(dbURI, dbmethod) {\n        super(dbURI, dbmethod);\n        this.query = [];\n        this.expansion = []; // expands the dataset\n        this.filters = [];  // adds filters\n        this.fields = []; // fields to show\n      }\n      \n      resetQueryParameters() {\n        this.query = [];\n      }\n  \n      /* Available operators:\n        \n        exists\n        doesnt_exist\n        equals\n        not_equals\n        like\n        not_like\n        contains\n        doesnt_contain\n        matches\n        doesnt_match\n      */\n\n      \n      setQueryParameter(parameter,value,operator='like') {\n        \n        this.query.push({\n          name:   \"query_field[]\",\n          value:  parameter\n        });\n        \n        this.query.push({\n          name:   \"query_op[]\",\n          value:  operator\n        });\n        \n        this.query.push({\n          name:   \"query_val[]\",\n          value:  value\n        });\n        \n        return this;  \n      }\n      \n      // A search term is general across all metadata\n      \n      setSearchTerm(value,operator='contains') {\n        this.setQueryParameter('*',value,operator);\n        return this;\n      }\n      \n      setAdditionalParameter(parameter,value) {\n        this.query.push({\n          name: parameter,\n          value: value\n          });\n        return this;\n      }\n      \n      // TO DO\n      \n      setDateIssed(term,operator='<') {\n        return this;\n      }\n      \n      // Rudimentary. Will be particualar to database implementation. \n      \n      setLimit(limit=100,offset=0) {\n        this\n          .setAdditionalParameter('limit',limit)\n          .setAdditionalParameter('offset',offset);\n        return this;\n      }\n      \n      setCollection(collectionID) {\n        this.setAdditionalParameter('collSel[]',collectionID);\n        return this;\n      }\n      \n      /*  Expands the returned dataset. \n        \n          Some values:\n            metadata\n            bitstreams\n            parentCollection\n            parentCollectionList\n            parentCommunityList\n      */\n            \n      expandQuery(expansion) {\n        this.expansion.push(expansion);\n        this.setAdditionalParameter('expand',this.expansion.join(','));\n        return this;\n      }\n      \n      // Filters the dataset. Exanmples include 'is_withdrawn' or 'is_discoverable'\n      \n      filterQuery(filter) {\n        this.filters.push(filter);\n        this.setAdditionalParameter('expand',this.filters.join(','));\n        return this;\n      }\n      \n      // A shortcut to include metadata in results\n      \n      includeMetaData() {\n        this.expandQuery('metadata');\n        return this;\n      }\n      \n      // A shortcut to include bitstreams in results\n      \n      includeBitstreams() {\n        this.expandQuery('bitstreams');\n        return this;\n      }\n            \n      // Builds DSpace-specific paths\n      // TO DO: Build this into a common schema for all storage devices\n      \n      build_paths() {\n        return {\n          items: {\n            list: {                              // Returns a list of items\n              method: \"GET\",\n              path:     \"items\", \n              },                              \n            item: {                               // Returns a single item with ID %%\n              method: \"GET\",\n              path:     \"items/%%\"\n              },                           \n            item_metadata: {                      // Returns metadata for item %%\n              method: \"GET\",\n              path:     \"items/%%/metadata\",  \n              },       \n            item_bitstreams: {                    // Returns available bitstreams for item %%\n              method: \"GET\",\n              path:     \"items/%%/bitstreams\"  \n              },\n            find_by_metadata: {                   // Returns items based on specified metadata value\n              method: \"POST\",\n              path:     \"items/find-by-metadata-field\"\n            }     \n          },\n          query: {  \n            filtered_items: {                     // Returns items based on chosen filters\n              method: \"GET\",\n              path:     \"filtered-items\",  \n              },           \n            filtered_collections: {               // Returns collections based on chosen filters\n              method: \"GET\",\n              path:     \"filtered-collections\",\n              }, \n            collection: {                         // Returns collection with ID %%\n              method: \"GET\",\n              path:     \"filtered-collections/%%\",\n              }         \n          },\n          bitstreams: { \n            list: {                                // Returns all bitstreams in DSpace\n              method: \"GET\",\n              path:     \"bitsreams\"\n            },\n            item: {                               // Returns an item with bitstream ID %%\n              method: \"GET\",\n              path:     \"bitstreams/{%%}\"\n            },\n            item_policy: {                        // Returns the policy for a bitstream with ID %%\n              method: \"GET\",\n              path:     \"bitstreams/%%/policy\"\n            },\n            content: {                             // Retrieve content for a bitstream with ID %%\n              method:  \"GET\",\n              path:      \"bitstreams/%%/retrieve\"\n            }\n          },\n          schemas: {\n            list: {                        // Returns a list of all schemas\n              method: \"GET\",\n              path:     \"registries/schema\"\n            },\n            item: {                             // Returns a metadata schema with schema prefix %%\n              method: \"GET\",\n              path:     \"registries/schema/%%\"\n            },\n            field: {                              // Returns a metadata schema with field ID %%\n              method: \"GET\",\n              path:     \"registries/metadata-fields/%%\"\n            }\n          }\n        };\n      }\n      \n    }\n    \n    /* !DISCOVERY CLASS */\n    \n    class Discovery {\n      constructor() {\n        this.dataOpQueue = [];\n        this.results = {};\n        // this.controller = new DiscoveryController(this);\n        // this.view = new DiscoveryView();\n        // this.DataHandler = new DiscoveryDataHandler();\n      }\n      \n      // fired by Controller when it changes state\n      \n      stateChange() {\n        this.dataOpQueue = this.controller.queue;\n        console.log(\"Operations Queue\");\n        console.log(this.dataOpQueue);\n        this.retrieveData();\n      }\n      \n      // Clears data parameters\n      \n      resetDataParameters() {\n        this.data.resetQueryParameters();\n      }\n      \n      retrieveData() {\n        var self = this;\n        self.resetDataParameters();\n        this.dataOpQueue.forEach(function(item){\n          self.data[item.op].apply(self.data,item.values);\n        });\n        self.results = self.data.performQuery().getResults();\n        console.log('results');\n        console.log(self.results);\n      }\n    }\n    \n    /* !ECO DISCOVERY CLASS */\n    /*\n      vars expects:\n      \n      {\n        controllerID: '#discovery-interface',\n        viewID:       '#results',\n        dbURI:        'books.spi.ryerson.ca/rest',\n        dbmethod:   'https'\n      }\n      \n    */\n    \n    class ECommonsOntarioDiscovery extends Discovery {\n      constructor(vars) {\n        super();\n        this.controller = new HTMLUIController(this);\n        this.view = new PaginatedHTMLView();\n        this.data = new DSpaceDataHandler(vars.dbURI, vars.dbmethod);\n        \n      }\n      \n      resetDataParameters() {\n        super.resetDataParameters();\n        this.data.includeMetaData();\n      }\n    }\n    \n    /* !DOCUMENT READY */\n    \n    $(document).ready(function() {\n            \n      var discovery = new ECommonsOntarioDiscovery\n        ({\n          dbURI:        'books.spi.ryerson.ca/rest',\n          dbmethod:     'https'\n        });\n      \n      // var results = discovery.data.setSearchTerm('Electrical').includeMetaData().performQuery().getResults();\n      \n    });\n  \n    \n})(jQuery);\n\nString.prototype.ucfirst = function() {\n  return this.charAt(0).toUpperCase() + this.slice(1);\n};\n\n\n\n"],"sourceRoot":"assets/scripts/"}