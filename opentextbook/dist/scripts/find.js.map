{"version":3,"sources":["../assets/scripts/find.js"],"names":["$","DiscoveryController","discoveryObj","controller","queue","enqueue","controllerStateChange","CriteriaSelectionController","facets","PaginationController","HTMLPaginationController","paginator","nextbtn","find","prevbtn","pagebtns","pageIndicator","html","currentPageIndicator","totalResultsIndicator","currentRangeIndicator","itemLimit","data","currentPage","initUI","resultsInfo","getResultInfo","nextPage","totalPages","viewPage","prevPage","page","attr","self","length","unbind","hide","bind","event","preventDefault","submit","show","previousPage","i","append","replaceAll","each","totalResults","start","end","push","op","values","HTMLSearchBox","HTMLCriteriaController","maxlistitems","setDefaultState","removeClass","setAttribute","closest","addClass","item","siblings","val","resetControllers","facet","undefined","initfnc","ucfirst","itemcnt","showmore","toggleClass","removeAttr","morebtn","fewerbtn","css","fadeIn","fadeOut","animate","scrollTop","offset","top","input","keyCode","which","replace","split","console","log","DiscoveryView","items","HTMLView","view","stage","titleStage","templates","parseTemplates","twrapper","remove","template","processed","match","forEach","token","key","processTokens","book_capsule","ECommonsOntarioCriteriaController","ECommonsOntarioHTMLView","discoveryObject","DiscoveryDataHandler","dbURI","dbmethod","dburl","paths","build_paths","query","resultsComplete","XHROpts","resetXHROpts","results","expandedResults","parameter","value","operator","Parameter","term","limit","async","method","error","xhrError","Deferred","opt","prepareQuery","setXHROpt","makeURL","filtered_items","path","retrieve","when","done","Math","ceil","parseInt","ajax","extend","success","textStatus","jqXHR","xhrResultsHandler","processResults","resolve","xhr","ajaxOptions","thrownError","list","item_metadata","find_by_metadata","filtered_collections","collection","DSpaceDataHandler","resetQueryParameters","expansion","filters","fields","name","setQueryParameter","updateResultsInfo","uuid","subject","byline","title","metadata","j","md","prop","join","serializeDisplayString","subjects","output","replaceLast","date","timestamp","now","Date","toUTCString","from","setAdditionalParameter","collectionID","expansionValue","includes","filter","expandQuery","retrieveExpandedResults","url","item_bitstreams","bitstreams","item_policy","content","schemas","field","Discovery","dataOpQueue","controllers","label","resetDataOps","concat","execute","setItemLimit","map","trim","setDataOp","retrieveData","getResults","displayResults","updateControllers","updateController","reset","resetDataParameters","apply","executeQuery","setItems","displayQueryResults","ECommonsOntarioDiscovery","vars","registerController","inboundState","getUrlParameter","decodeURIComponent","criteriaController","includeMetaData","document","ready","discovery","jQuery","String","prototype","charAt","toUpperCase","slice","search","replacement","target","RegExp","index","lastIndexOf","substring","toString","sParam","sPageURL","window","location","sURLVariables","sParameterName"],"mappings":"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","file":"find.js","sourcesContent":["/* jshint latedef:nofunc */\n//needed for function hoisting for build \n\n(function($) {\n  \n    /* !DISCOVERY CONTROLLER CLASS */\n    \n    // Core Controller Class\n    \n    class DiscoveryController {\n      constructor(discoveryObj) {\n        this.discoveryObj = discoveryObj;\n        this.controller = null;\n        this.queue = [];\n      }  \n      \n      // To be called when results return from the data handler. Used to update results-dependent control devices such as paginators.\n      \n      updateController() {\n        \n      }\n      \n      // The controller is responsible for adding Data Class operators and values to the this.queue array, using the following form:\n      // { op: 'dataOpName', value: [list,of,op,arguments] }\n      \n      enqueue() {\n        \n      }\n      \n      // Submit enqueues and activates a controller state change in the main Disocvery object. \n      // If you want to manually retrieive values just enqueue the controller (listing its ops)\n      \n      // Reset should reset the controller to its default options.\n      \n      reset() {\n        \n      }\n            \n      submit() {\n        this.enqueue();\n        this.discoveryObj.controllerStateChange();\n      }\n      \n    }\n    \n    // Manages UIs that submit filter criteria.\n    \n    /* !CRITERIA SELECTION CONTROLLER CLASS */\n    \n    class CriteriaSelectionController extends DiscoveryController {\n      constructor(discoveryObj) {\n        super(discoveryObj);\n        this.facets = null;\n      }\n      \n      updateController() {\n        super.updateController();\n      }\n      \n      enqueue() {\n        super.enqueue();\n      }\n      \n      submit() {\n        super.submit();\n      }\n      \n    }\n    \n    /* !PAGINATION CONTROLLER CLASS */\n    // Manages Pagination UIs.\n    \n    class PaginationController extends DiscoveryController {\n      constructor(discoveryObj) {\n        super(discoveryObj);\n      }\n      \n      updateController() {\n        super.updateController();\n      }\n      \n      initUI() {\n        \n      }\n      \n      enqueue()  {\n        super.enqueue();\n      }\n      \n      submit() {\n        super.submit();\n      }\n    }\n    \n    /* !HTML PAGINATION CONTROLLER CLASS */\n    \n    // Manages HTML5-Based Pagination UIs\n    class HTMLPaginationController extends PaginationController {\n      constructor(discoveryObj) {\n        super(discoveryObj);\n        \n        // Components\n        this.discoveryObj = discoveryObj;\n        this.paginator = $('[data-controller-paginator]');\n        this.nextbtn = this.paginator.find('[data-controller-next]');\n        this.prevbtn = this.paginator.find('[data-controller-previous]');\n        this.pagebtns = this.paginator.find('[data-controller-pagebtns]');\n        this.pageIndicator = this.pagebtns.html();\n        \n        this.currentPageIndicator = this.paginator.find('[data-controller-current-page]');\n        this.totalResultsIndicator = this.paginator.find('[data-controller-total-results]');\n        this.currentRangeIndicator = this.paginator.find('[data-controller-current-range]');\n        \n        // Settings\n        \n        this.itemLimit = this.paginator.data('controller-item-limit');\n        this.currentPage = this.paginator.data('controller-current-page');\n                        \n        this.initUI();\n      }\n      \n      nextPage() {\n        var resultsInfo = this.discoveryObj.data.getResultInfo();\n        var nextPage = (resultsInfo.currentPage + 1) > resultsInfo.totalPages ? 1 : (resultsInfo.currentPage + 1);\n        this.viewPage(nextPage);\n      }\n      \n      previousPage() {\n        var resultsInfo = this.discoveryObj.data.getResultInfo();\n        var prevPage = (resultsInfo.currentPage - 1) === 0 ? resultsInfo.totalPages : (resultsInfo.currentPage - 1);\n        this.viewPage(prevPage);\n      }\n            \n      viewPage(page) {        \n        var resultsInfo = this.discoveryObj.data.getResultInfo();\n        this.paginator.attr('data-controller-current-page',page);\n      }\n      \n      updateController() {\n        this.initUI();\n      }\n      \n      initUI() {\n        super.initUI();\n        \n        var self = this;\n        var resultsInfo = this.discoveryObj.data.getResultInfo();\n                        \n        // Resent click event handlers and hide control elements.        \n        \n        if (this.nextbtn.length > 0) {\n          this.nextbtn.unbind('click').hide();\n          \n          this.nextbtn.bind('click',function(event){\n            event.preventDefault();\n            self.nextPage();\n            self.submit();\n          });\n          \n          if (resultsInfo.currentPage < resultsInfo.totalPages) {\n            this.nextbtn.show();\n          } \n        }\n        \n        if(this.prevbtn.length > 0) {\n          this.prevbtn.unbind('click').hide();\n          \n          this.prevbtn.bind('click',function(event){\n            event.preventDefault();\n            self.previousPage();\n            self.submit();\n          });\n          \n          if (resultsInfo.currentPage > 1) {\n            this.prevbtn.show();\n          }   \n        \n        }\n        \n        this.pagebtns.hide();\n        this.pagebtns.html('');\n          \n        if (this.paginator.length > 0) {\n        \n          // Build paginators\n          \n          if (resultsInfo.totalPages > 0) {\n            for (var i=1;i<resultsInfo.totalPages+1;i++) {\n              this.pagebtns.append(this.pageIndicator.replaceAll('%%',i)); \n            }\n                        \n            this.pagebtns.find('[data-controller-pagebtn]').each(function(){\n              $(this).bind('click',function(event) {\n                event.preventDefault();\n                self.viewPage($(this).attr('data-pageref'));\n                self.submit();\n              });\n            });\n            \n            this.pagebtns.show();\n\n            \n            if (this.currentPageIndicator.length > 0) {\n              this.currentPageIndicator.html(resultsInfo.currentPage);\n            }\n            \n            if (this.totalResultsIndicator.length > 0) {\n              this.totalResultsIndicator.html(resultsInfo.totalResults);\n            }\n            \n            if (this.currentRangeIndicator.length > 0) {\n              var start = ((resultsInfo.currentPage-1) * resultsInfo.itemLimit) + 1;\n              var end = ((resultsInfo.currentPage-1) * resultsInfo.itemLimit) + resultsInfo.itemLimit;\n              end = end > resultsInfo.totalResults ? resultsInfo.totalResults : end;\n              this.currentRangeIndicator.html(start + \" – \" + end);\n            }\n            \n            this.paginator.show();\n          }\n        }        \n      }\n      \n      enqueue() {\n        this.queue = [];\n        this.queue.push(\n          {\n            op: 'setItemLimit',\n            values: [this.paginator.attr('data-controller-item-limit'),this.paginator.attr('data-controller-current-page')]\n          });          \n      }\n      \n      \n    }\n    \n    /* !HTML SEARCH BOX CLASS */\n    // Manages standalone Search Box UIs\n    \n    class HTMLSearchBox extends CriteriaSelectionController {\n      constructor(discoveryObj) {\n        super(discoveryObj);\n      }\n    }\n        \n    /* !HTMLUI CONTROLLER */\n        \n    class HTMLCriteriaController extends CriteriaSelectionController {\n      constructor(discoveryObj) {\n        super(discoveryObj);\n        this.controller = $(\"[data-widget='discovery-controller']\");\n        this.facets = this.controller.find(\"[data-facet]\");\n        \n        // Settings\n        this.maxlistitems = 10;\n        \n        // Init\n        this.setDefaultState();\n        this.initUI();\n        \n      }\n      \n      // Finds any item marked 'data-default-value' and sets it for inclusion in the queue.\n      \n      setDefaultState() {\n        \n        this.controller.find('.selected').removeClass('selected');\n        \n        this.controller.find('[data-default-value]').each(function(){\n          $(this)[0].setAttribute('data-selected','');\n          $(this).closest('[data-facet]')[0].setAttribute('data-enqueue','');\n          $(this).addClass('selected');\n        });\n        \n          \n        var facets = this.controller.find('[data-facet]');\n        \n        // Mark generic (*) value as selected if no other facet items are.\n        \n        facets.find('li').each(function(){\n          var item = $(this);\n          if(item.data('value') === '*' && item.siblings('[data-selected]').length === 0) {\n            item.addClass('selected');\n          }\n        });\n        \n        // Clear all search forms\n        \n        facets.find('[data-user-input]').val('');\n        \n        \n      }\n      \n      initUI() {\n        var self = this;\n        \n        // Submit Button\n        \n        this.controller.find('[data-submit]').bind('click',function(event){\n          event.preventDefault();\n          self.submit();\n        });\n        \n        // Reset Button\n        \n        this.controller.find('[data-reset]').bind('click',function(event){\n          event.preventDefault();\n          self.discoveryObj.resetControllers();\n          self.submit();\n        });\n        \n        /* \n           Allows us to define widget initialization methods based on the ui-type.\n           Methods are in the form init[ui-type], with ui-type capitalized.\n           \n           Initialization functions are responsible for the following:\n           - Binding the appropriate change event (e.g. a click for a list or change for a selection). \n           - Adding its parent facet to the query queue by assigning it a 'data-enqueue' attribute.\n           - Adding a 'data-selected' attribute to any selected item.\n           - Resetting the facet if a user selects an “all” or “none” value, indicated in the controller by a '*' data-value.\n           - Firing the controller’s submit method.\n           - Performing any UX event modifications (such as preventing default link behaviour on link lists).\n        */\n        \n        this.facets.each(function() {\n          var facet = $(this);\n          if (typeof facet.data('ui-type') === undefined) { return; }\n          var initfnc = \"init\" + facet.data('ui-type').ucfirst();\n          if (typeof self[initfnc] !== 'function') { return; }\n          self[initfnc](facet,self);\n        });\n        \n        \n      }\n                  \n      initList(facet,self) {\n        var itemcnt = 0;\n        var showmore = false;\n        facet.find('[data-user-input-wrapper]').find('li > a').each(function() {\n          var item = $(this).closest('li');\n                    \n          $(this).bind('click',function(event) {\n            event.preventDefault();\n            item.toggleClass('selected');\n            if (item.data('value') === '*') {\n              facet.removeAttr('data-enqueue');\n              item.siblings('li').removeAttr('data-selected');\n            } else {\n              facet[0].setAttribute('data-enqueue',''); // Use native JS to set boolean attribute\n              item[0].setAttribute('data-selected',''); \n            }\n            \n            // Facet only allows a single value\n                        \n            if(typeof facet.data('ui-restriction') !== \"undefined\" && facet.data('ui-restriction') === 'single') {\n              item.siblings('li').removeAttr('data-selected').removeClass('selected');\n            }\n            \n            self.submit();\n          });\n          \n          if (itemcnt++ > self.maxlistitems) {\n            $(this).closest('li').hide();\n            showmore = true;\n          }\n        });  \n        \n        // UI Animation for showing and hiding long item lists\n        \n        if (showmore === true) {\n                    \n          var morebtn = $(\"<p data-controller-ui-showmore><a title='Show all items'>Show all items</a><p>\");\n          var fewerbtn = $(\"<p data-controller-ui-showfewer><a title='Show fewer items'>Show fewer items</a><p>\");\n          \n          morebtn\n            .css('cursor','pointer')\n            .addClass('showmore')\n            .bind('click',function(event) {\n              event.preventDefault();\n              facet.find('li:hidden').each(function(){\n                $(this).fadeIn(200);\n              });\n              $(this).hide();\n              facet.find('[data-controller-ui-showfewer]').fadeIn(200);\n            });\n            \n          fewerbtn\n            .css('cursor','pointer')\n            .css('display','none')\n            .addClass('showmore')\n            .bind('click',function(event) {\n              event.preventDefault();\n              var i=0;\n              facet.find('li').each(function(){\n                if (i++ > self.maxlistitems) {\n                  $(this).fadeOut(200);\n                }\n              });\n              $(this).hide();\n              facet.find('[data-controller-ui-showmore]').fadeIn(200);\n              $('html, body').animate({\n                  scrollTop: self.controller.offset().top\n              }, 800);\n            });\n          \n          facet.append([morebtn,fewerbtn]); \n          \n        }      \n      }\n      \n      initTextfield(facet,self) {\n        facet.find('[data-user-input]').each(function() {\n          $(this).bind('keypress',function(event) {\n            var input = $(this);\n            if(input.val().length > 2) { // Don’t submit if there are less than three characters in the text field\n              facet[0].setAttribute('data-enqueue',''); // Use native JS to set boolean attribute\n              input[0].setAttribute('data-selected','');\n              input.attr('data-value',input.val());\n              self.submit();\n            } else {\n              facet.removeAttr('data-enqueue');\n              input.removeAttr('data-selected');\n            }\n          })\n          .bind('keypress', function(event) { // intercepts return character which would otherwise \"submit\" the form\n            if ((event.keyCode ? event.keyCode : event.which) === 13) {\n              self.submit();\n              return false;\n            } else { \n              return true;\n            }\n          });\n        });\n      }   \n      \n      reset() {\n        this.controller.find('[data-enqueue]').each(function(){\n          $(this).removeAttr('data-enqueue');\n        });\n        \n        this.controller.find('[data-selected]').each(function(){\n          $(this).removeAttr('data-selected');\n        });\n        \n        this.setDefaultState();\n      }\n      \n      /* \n          Adds a list of data retrieval objects to the queue. Data retrieval objects contain a\n          data op (corresponding to a method of the data object) and values corresponding to its\n          arguments.\n      */   \n      \n      enqueue() {\n        var self = this;\n        this.queue = [];\n        this.controller.find('[data-enqueue]').each(function() {\n          var facet = $(this);\n          var values = [];\n          facet.find('[data-selected]').each(function() {\n            self.queue.push(\n              {\n                op: facet.data('op'),\n                values: facet.data('param').replace('%%',$(this).attr('data-value')).split('|')\n              }\n            );\n          });\n          \n        });\n        \n        console.log('Criteria Queue');\n        console.log(this.queue);\n      }\n      \n      submit() {\n        super.submit();\n      }\n      \n      \n    }\n    \n    /* !DISCOVERY VIEW CLASS */\n    \n    class DiscoveryView {\n      contructor(discoveryObj) {\n        this.items = [];\n      }\n      \n      setItems(items) {\n        this.items = items;\n        return this;\n      }\n            \n      displayQueryResults() {\n\n      }\n    }\n    \n    \n    /* !HTML VIEW CLASS */\n    \n    \n    // Displays results on HTML5 Stage\n    \n    class HTMLView extends DiscoveryView {\n      constructor(discoveryObj) {\n        super(discoveryObj);\n        this.view = $('[data-view-results]');\n        this.stage = this.view.find('[data-view-stage]');\n        this.titleStage = this.view.find('[data-view-title-stage]');\n        this.templates = {};\n        this.parseTemplates();        \n      }\n      \n      // Finds templates in the DOM and adds them to the templates object.\n      // Templates are designated in the DOM by a [data-view-template-wrapper] boolean attribute.\n      // This script expects that each wrapper have [data-template-name], which will be used as\n      // an object property. The template block is then removed from the DOM.\n      \n      parseTemplates() {\n        var self = this;\n        var templates = this.view.find('[data-view-templates]');\n        templates.find('[data-view-template-wrapper]').each(function(){\n          var twrapper = $(this);\n          self.templates[twrapper.data('view-template-name')] = twrapper.html();\n        })\n        .remove();\n      }\n      \n      // Tokens are processed as follows:  \n      // %%DataKey%%\n      \n      processTokens(template,item) {\n        var processed = template;\n        template.match(/\\%\\%[^\\%]*\\%\\%/g).forEach(function(token) {\n          var key = token.replaceAll('%%','');\n          processed = processed.replaceAll(token,item.values[key]);\n        });\n        \n        return processed;\n      }\n      \n      displayQueryResults() {\n        var self = this;\n        self.stage.html('');\n        this.items.forEach(function(item) {\n          self.stage.append(self.processTokens(self.templates.book_capsule,item));\n        });\n      }\n    }\n    \n    // Displays controller particular to the ECommonsOntario site\n    \n    class ECommonsOntarioCriteriaController extends HTMLCriteriaController {\n      constructor(discoveryObj) {\n        super(discoveryObj);\n      }\n    }\n    \n    // Displays results particular to the ECommonsOntario site\n    \n    class ECommonsOntarioHTMLView extends HTMLView {\n      constructor(discoveryObject) {\n        super(discoveryObject);\n      }\n    }\n        \n    /* !DISCOVERY DATA HANDLER */\n    \n    class DiscoveryDataHandler {\n      constructor(dbURI, dbmethod) {\n        this.dburl = dbmethod + '://' + dbURI;\n        \n        this.paths = this.build_paths();\n        this.query = {};\n        this.resultsComplete = null;\n        this.XHROpts = this.resetXHROpts();\n        this.results = {};\n        this.itemLimit = 6;\n        this.currentPage = 0;\n        this.totalResults = 0;\n        this.totalPages = 0;\n        \n        this.expandedResults = {}; // results without limits\n      }\n            \n      resetQueryParameters() {\n        this.query = {};\n      }\n  \n      // Placeholder. Will be particualar to database implementation. \n      \n      setQueryParameter(parameter,value,operator='like') {\n        this.query[Parameter] = value;\n        return this;  \n      }\n      \n      // Placeholder. Will be particular to database implementation\n      \n      setSearchTerm(term,operator='matches') {\n        return this;\n      }      \n      // Placeholder. Will be particular to database implementation\n      \n      setDateIssed(value,operator='<') {\n        return this;\n      }\n      \n      // Placeholder. Will be particualar to database implementation. \n      \n      setItemLimit(limit,page) {\n        var offset = limit * (page - 1);\n        this.itemLimit = limit;\n        this.currentPage = page;\n        return this;\n      }      \n      \n      // A wrapper for the query Parameter\n      \n      getQuery() {\n        return this.query;\n      }\n      \n      // Sets default options for the AJAX call.\n      \n      resetXHROpts() {\n        this.XHROpts = {\n          async: true,\n          method: \"GET\", // default\n          //traditional: true,\n          //crossOrigin: true,\n          error: this.xhrError,\n        };\n        \n        this.resultsComplete= $.Deferred();\n      }\n      \n      // Set AJAX option as per http://api.jquery.com/jquery.ajax/\n      \n      setXHROpt(opt,value) {\n        this.XHROpts[opt] = value;\n        return this;\n      }\n      \n      // Wrapper that returns AJAX options\n      \n      getXHROpts() {\n        return this.XHROpts;\n      }\n      \n      // Performs filtered query\n      \n      executeQuery() {\n        this.resetXHROpts();\n        this.prepareQuery();\n        this\n          .setXHROpt('url',this.makeURL(this.paths.query.filtered_items.path))\n          .setXHROpt('method',this.paths.query.filtered_items.method)\n          .setXHROpt('data',this.query);  \n        this.retrieve(); \n        return this;     \n      }\n      \n      processResults() {\n        var self = this;\n        $.when(this.resultsComplete).done(function() {\n          \n        });\n      }\n      \n      // To be called after results are processed. Each data class must return a total result count outside of filter limits.\n      \n      updateResultsInfo(totalResults) {\n        this.totalResults = totalResults;\n        this.totalPages = Math.ceil(this.totalResults / this.itemLimit);\n      }\n      \n      // Returns a handy object with result resultsInfo. Useful for updating pagination controllers.\n      \n      getResultInfo() {\n        return {\n          itemLimit: parseInt(this.itemLimit),\n          totalResults: parseInt(this.totalResults),\n          currentPage: parseInt(this.currentPage),\n          totalPages: parseInt(this.totalPages)\n        };\n      }\n      \n      // A shortcut to the results. Can only be called when this.resultsComplete is resolved.\n      \n      getResults() {\n        return this.results;\n      }\n      \n      makeURL(path) {\n        return this.dburl + \"/\" + path;\n      }\n            \n      // Retrieves data from storage. On success it calls an xhrResultsHandler (which is passed data directly)\n      // and a processResults (which is handed no arguments and is intended to operate on this.results)\n                      \n      retrieve() {\n        var self = this;\n        $.ajax($.extend(this.XHROpts,\n          {\n            success: \n              function(data,textStatus,jqXHR) { \n                self.results = data; \n                self.xhrResultsHandler(data,textStatus,jqXHR,self);\n                self.processResults();\n                self.resultsComplete.resolve(); \n              },\n          }\n        ));\n      }\n      \n      \n      // Handles XHR Errors. This function must be explicity set as part of the $.ajax() parameters.\n      \n      xhrError(xhr, ajaxOptions, thrownError) {\n        console.log('error');\n        console.log(xhr);\n        console.log(thrownError);\n      }\n      \n      // called after a successful ajax request \n      // marks resultsComplete as resolve.\n      \n      xhrResultsHandler(data,textStatus,jqXHR,self) {\n      \n      }\n      \n      // see DSpace Handler for an extended implementation\n      \n      build_paths() {\n        return {\n          items: {\n            list: {                              // Returns a list of items\n              method: \"GET\",\n              path:     \"[path]\", \n              },                              \n            item: {                               // Returns a single item with ID %%\n              method: \"GET\",\n              path:     \"[path]/%%\"\n              },                           \n            item_metadata: {                      // Returns metadata for item %%\n              method: \"GET\",\n              path:     \"[path]/%%/[key]\",  \n              },       \n            find_by_metadata: {                   // Returns items based on specified metadata value\n              method: \"POST\",\n              path:     \"[path]\"\n            }     \n          },\n          query: {  \n            filtered_items: {                     // Returns items based on chosen filters\n              method: \"GET\",\n              path:     \"[path]\",  \n              },           \n            filtered_collections: {               // Returns collections based on chosen filters\n              method: \"GET\",\n              path:     \"[path]\",\n              }, \n            collection: {                         // Returns collection with ID %%\n              method: \"GET\",\n              path:     \"[path]/%%\",\n              }         \n          }\n        };\n      }\n    }\n    \n    /* !DSPACE DATA HANDLER */\n    \n    class DSpaceDataHandler extends DiscoveryDataHandler {\n      constructor(dbURI, dbmethod) {\n        super(dbURI, dbmethod);\n        this.resetQueryParameters();\n      }\n      \n      resetQueryParameters() {\n        this.query = [];\n        this.expansion = []; // expands the dataset\n        this.filters = [];  // adds filters\n        this.fields = []; // fields to show\n      }\n  \n      /* \n        \n        Available operators:\n        \n        exists\n        doesnt_exist\n        equals\n        not_equals\n        like\n        not_like\n        contains\n        doesnt_contain\n        matches\n        doesnt_match\n    \n      */\n\n      setQueryParameter(parameter,value,operator='like') {\n        \n        this.query.push({\n          name:   \"query_field[]\",\n          value:  parameter\n        });\n        \n        this.query.push({\n          name:   \"query_op[]\",\n          value:  operator\n        });\n        \n        this.query.push({\n          name:   \"query_val[]\",\n          value:  value\n        });\n        \n        return this;  \n      }\n      \n      // Handles any special processing\n      \n      prepareQuery() {\n\n      }\n      \n      // A search term is general across all metadata\n      // Note: the “matches” operator alongside framing wildcards (“*value*”) returns a general case-insensitive result.\n      \n      setSearchTerm(value,operator='matches') {\n        this.setQueryParameter('*','(?i).*' + value + '*',operator);\n        return this;\n      }\n      \n      // called after a successful ajax request \n      \n      xhrResultsHandler(data,textStatus,jqXHR) {\n        super.xhrResultsHandler(data,textStatus,jqXHR);\n        if (typeof this.results.items === 'undefined') {\n          this.results.items = [];\n        }\n      }\n      \n      processResults() {\n        super.processResults();\n        var self = this;\n                \n        if (typeof self.expandedResults['unfiltered-item-count'] !== \"undefined\") {\n          self.updateResultsInfo(self.expandedResults['unfiltered-item-count']);\n        }\n        \n        for(var i=0; i<self.results.items.length; i++) {\n          var item = self.results.items[i];\n          \n          // Set default values.\n                  \n          var values = {\n            uuid: item.uuid,\n            subject: '',\n            byline: '',\n            title: ''\n          };\n          \n          if (typeof item.metadata !== \"undefined\") {\n            for(var j=0; j<item.metadata.length; j++) {\n              var md = item.metadata[j];\n              var key = md.key;\n              if (typeof values[key] === \"undefined\") {\n                values[key] = [];\n              }\n              values[key].push(md.value);\n            }\n          }\n          \n          // Join multiple values as single string\n          \n          for(var prop in values) {\n            if (values[prop] === \"undefined\" || typeof values[prop] !== 'object') {\n              values[prop] = '';\n            } else {\n              values[prop] = values[prop].join('%%');\n            }\n          }\n                      \n          // Process contributors\n          values.byline = self.serializeDisplayString(values,'dc.contributor.author');\n          values.subjects = self.serializeDisplayString(values,'dc.subject');\n          \n          self.results.items[i].values = values;\n        }\n      }\n      \n      serializeDisplayString(values,key) {\n        var output = '';\n        \n        if (typeof values[key] !== \"undefined\") {\n          output = values[key].replaceAll('%%',', ');\n          output = output.replaceLast(',',' and');\n        }\n        \n        return output;\n      }\n      \n      setAdditionalParameter(parameter,value) {\n        this.query.push({\n          name: parameter,\n          value: value\n          });\n        return this;\n      }\n      \n      // TO DO\n      \n      setDateIssed(date,operator='<') {\n        return this;\n      }\n      \n      setDateUpdated(timestamp) {\n        var now = new Date(Date.now()).toUTCString();\n        var from = new Date(timestamp * 1000).toUTCString();\n        this.setQueryParameter('dc.date.updated',\"[\" + from + \" TO \" + now + \"]\",\"equals\");        \n      }\n            \n      setItemLimit(limit=6,page=1) {\n        super.setItemLimit(limit,page);\n        var offset= limit * (page - 1);\n        this\n          .setAdditionalParameter('limit',limit)\n          .setAdditionalParameter('offset',offset);\n        return this;\n      }\n      \n      setCollection(collectionID) {\n        this.setAdditionalParameter('collSel[]',collectionID);\n        return this;\n      }\n      \n      /*  Expands the returned dataset. \n        \n          Some values:\n            metadata\n            bitstreams\n            parentCollection\n            parentCollectionList\n            parentCommunityList\n      */\n            \n      expandQuery(expansionValue) {\n        if (this.expansion.includes(expansionValue) === false) {\n          this.expansion.push(expansionValue);\n          this.setAdditionalParameter('expand',this.expansion.join(','));\n        }\n        return this;\n      }\n      \n      // Filters the dataset. Exanmples include 'is_withdrawn' or 'is_discoverable'\n      \n      filterQuery(filter) {\n        this.filters.push(filter);\n        this.setAdditionalParameter('expand',this.filters.join(','));\n        return this;\n      }\n      \n      // A shortcut to include metadata in results\n      \n      includeMetaData() {\n        this.expandQuery('metadata');\n        return this;\n      }\n      \n      // A shortcut to include bitstreams in results\n      \n      includeBitstreams() {\n        this.expandQuery('bitstreams');\n        return this;\n      }\n      \n      /* ! -- AJAX call */\n      // See “HACK” below for explanation. Need to eliminate this.\n      \n      retrieve() {\n        var self = this;\n        $.ajax($.extend(this.XHROpts,\n          {\n            success: \n              function(data,textStatus,jqXHR) { \n                self.results = data; \n                self.xhrResultsHandler(data,textStatus,jqXHR,self);\n                self.retrieveExpandedResults();\n              },\n          }\n        ));\n      }\n      \n      // HACK: Can't seem to find a way to retrieve both a paginated result and the total number of results without pagination.\n      // This total value is required to set up a proper pagination UI.\n      // One option would be to retrieve all results unpaginated and parse them on the client side. \n      // As of now we're querying twice to get the number of unfiltered items.\n      \n      retrieveExpandedResults() {\n        var self = this;\n                        \n        $.ajax({\n            method: \"GET\",\n            async: true,\n            url: this.makeURL(this.paths.query.filtered_items.path),\n            data: this.query.filter(function(item){\n              return (item.name === 'limit' || item.name === 'offset') !== true;\n            }),\n            success: \n              function(data,textStatus,jqXHR) { \n                self.expandedResults = data;\n                self.processResults();\n                console.log(self.results);\n                self.resultsComplete.resolve(); \n              }\n            });\n      }\n\n            \n      // Builds DSpace-specific paths\n      // TO DO: Build this into a common schema for all storage devices\n      \n      build_paths() {\n        return {\n          items: {\n            list: {                              // Returns a list of items\n              method: \"GET\",\n              path:     \"items\", \n              },                              \n            item: {                               // Returns a single item with ID %%\n              method: \"GET\",\n              path:     \"items/%%\"\n              },                           \n            item_metadata: {                      // Returns metadata for item %%\n              method: \"GET\",\n              path:     \"items/%%/metadata\",  \n              },       \n            item_bitstreams: {                    // Returns available bitstreams for item %%\n              method: \"GET\",\n              path:     \"items/%%/bitstreams\"  \n              },\n            find_by_metadata: {                   // Returns items based on specified metadata value\n              method: \"POST\",\n              path:     \"items/find-by-metadata-field\"\n            }     \n          },\n          query: {  \n            filtered_items: {                     // Returns items based on chosen filters\n              method: \"GET\",\n              path:     \"filtered-items\",  \n              },           \n            filtered_collections: {               // Returns collections based on chosen filters\n              method: \"GET\",\n              path:     \"filtered-collections\",\n              }, \n            collection: {                         // Returns collection with ID %%\n              method: \"GET\",\n              path:     \"filtered-collections/%%\",\n              }         \n          },\n          bitstreams: { \n            list: {                               // Returns all bitstreams in DSpace\n              method: \"GET\",\n              path:     \"bitsreams\"\n            },\n            item: {                               // Returns an item with bitstream ID %%\n              method: \"GET\",\n              path:     \"bitstreams/{%%}\"\n            },\n            item_policy: {                        // Returns the policy for a bitstream with ID %%\n              method: \"GET\",\n              path:     \"bitstreams/%%/policy\"\n            },\n            content: {                             // Retrieve content for a bitstream with ID %%\n              method:  \"GET\",\n              path:      \"bitstreams/%%/retrieve\"\n            }\n          },\n          schemas: {\n            list: {                               // Returns a list of all schemas\n              method: \"GET\",\n              path:     \"registries/schema\"\n            },\n            item: {                               // Returns a metadata schema with schema prefix %%\n              method: \"GET\",\n              path:     \"registries/schema/%%\"\n            },\n            field: {                              // Returns a metadata schema with field ID %%\n              method: \"GET\",\n              path:     \"registries/metadata-fields/%%\"\n            }\n          }\n        };\n      }\n      \n    }\n    \n    /* !DISCOVERY CLASS */\n    \n    class Discovery {\n      constructor() {\n        this.dataOpQueue = [];\n        this.results = {};\n        this.items = [];\n        this.view = {};\n        this.controllers = {};\n\n        \n        /* Example:\n          this.view = new ECommonsOntarioHTMLView(this);\n          this.data = new DSpaceDataHandler(vars.dbURI, vars.dbmethod);\n        */\n      }\n      \n      registerController(label,controller) {\n        this.controllers[label] = controller;\n      }\n      \n      inboundState() {\n        \n      }\n            \n      // fired by Controller when it changes state.\n      // All controllers current op queues are reassembled.\n      \n      controllerStateChange() {\n        \n        this.resetDataOps();\n        \n        for (var controller in this.controllers) {\n          if (this.controllers[controller].queue.length > 0) {\n            this.dataOpQueue = this.dataOpQueue.concat(this.controllers[controller].queue);\n          }\n        }\n                        \n        this.execute();\n      }\n      \n      setItemLimit(limit,page) {\n        this.data.setItemLimit(limit,page);\n      }\n      \n      resetDataOps() {\n        this.dataOpQueue = [];\n      }\n            \n      setDataOp(op,values) {\n\n        // remove spaces from values\n                \n        values = values.map(function(val){\n          val = val.trim();\n          return val;\n        });\n        \n        this.dataOpQueue.push({\n          op: op,\n          values: values\n        });\n      }\n      \n      quickSearch(term) {\n        this.dataOpQueue = [];\n        this.setDataOp('setSearchTerm',[term]);\n        this.execute();\n      }\n            \n      // Clears data parameters\n      \n      resetDataParameters() {\n        this.data.resetQueryParameters();\n      }\n      \n      // retrieves and displays data\n      \n      execute() {\n        var self = this;\n        self.retrieveData();\n        $.when(this.data.resultsComplete).done(function(){\n          self.results = self.data.getResults();\n          self.items = typeof self.results.items !== \"undefined\" ? self.results.items : [];\n          self.displayResults();\n          self.updateControllers();\n          \n        });\n      }\n      \n      // Updates all registered controllers\n      \n      updateControllers() {\n        for(var controller in this.controllers) {\n          this.controllers[controller].updateController();\n        } \n      }\n      \n      // Resets all controllers\n      \n      resetControllers() {\n        for(var controller in this.controllers) {\n          this.controllers[controller].reset();\n        } \n      }\n      \n      // An Alias for reset Data Parameters\n      \n      newQuery() {\n         this.resetDataParameters();\n      }\n      \n      /* !-- Retrieve Data */\n\n      retrieveData() {\n        var self = this;\n        this.resetDataParameters();\n        this.dataOpQueue.forEach(function(item){\n          self.data[item.op].apply(self.data,item.values);\n        });\n        self.data.executeQuery();\n        return this;\n      }      \n      \n      // This function can only be called when this.data.resultsComplete has been resolved.\n      \n      displayResults() {\n        this.view\n          .setItems(this.items)\n          .displayQueryResults();\n      }\n    }\n    \n    /* !ECO DISCOVERY CLASS */\n    /*\n      vars expects:\n      \n      {\n        dbURI:      'books.spi.ryerson.ca/rest',\n        dbmethod:   'https'\n      }\n      \n    */\n    \n    class ECommonsOntarioDiscovery extends Discovery {\n      constructor(vars) {\n        super();\n        this.data = new DSpaceDataHandler(vars.dbURI, vars.dbmethod);\n        this.view = new ECommonsOntarioHTMLView(this);\n        \n        // TO DO: There could be auto-discovery here\n        \n        this.registerController('criteriaController',new ECommonsOntarioCriteriaController(this));\n        this.registerController('paginationController', new HTMLPaginationController(this));\n        \n        this.inboundState();\n      }\n      \n      /* !--Initial State of Application */\n      \n      // Right now only accepts search parameters\n      \n      inboundState() {\n        var op = getUrlParameter('op');\n        var value = decodeURIComponent(getUrlParameter('value'));\n  \n        if (op === 'setSearchTerm') {\n          this.controller.criteriaController.reset();\n          $('#search-value').val(value);\n        }\n        \n        \n        for(var controller in this.controllers) {\n\n          this.controllers[controller].enqueue();\n        }\n        \n        // Executes the initial state of the controllers.\n        \n        this.controllerStateChange();\n        \n      }\n      \n      setItemLimit(limit,page) {\n        super.setItemLimit(limit,page);\n      }\n      \n      resetDataParameters() {\n        super.resetDataParameters();\n        this.data.includeMetaData();\n      }\n      \n    }\n    \n    /* !DOCUMENT READY */\n    \n    $(document).ready(function() {\n            \n      var discovery = new ECommonsOntarioDiscovery\n        ({\n          dbURI:        'dsweb.semiprodint.ryerson.ca/rest',\n          dbmethod:     'http'\n        });\n      \n      // var results = discovery.data.setSearchTerm('Electrical').includeMetaData().executeQuery().getResults();\n      \n    });\n  \n})(jQuery);\n\n// Functions like PHP’s ucfirst()\n\nString.prototype.ucfirst = function() {\n  return this.charAt(0).toUpperCase() + this.slice(1);\n};\n\n// Replaces all instances of a string\n\nString.prototype.replaceAll = function(search, replacement) {\n  var target = this;\n  return target.replace(new RegExp(search, 'g'), replacement);\n};\n\nString.prototype.replaceLast = function(find, replace) {\n  var index = this.lastIndexOf(find);\n\n  if (index >= 0) {\n      return this.substring(0, index) + replace + this.substring(index + find.length);\n  }\n\n  return this.toString();\n};\n\n// With thanks to http://www.jquerybyexample.net/2012/06/get-url-parameters-using-jquery.html\n\nfunction getUrlParameter (sParam) {\n    var sPageURL = decodeURIComponent(window.location.search.substring(1)),\n    sURLVariables = sPageURL.split('&'),\n    sParameterName,\n    i;\n\n  for (i = 0; i < sURLVariables.length; i++) {\n    sParameterName = sURLVariables[i].split('=');\n\n    if (sParameterName[0] === sParam) {\n        return sParameterName[1] === undefined ? true : sParameterName[1];\n    }\n  }\n}\n\n\n"],"sourceRoot":"assets/scripts/"}