{"version":3,"sources":["../assets/scripts/find.js"],"names":["$","DiscoveryController","DiscoveryView","HTMLUIController","controllerID","id","HTMLView","viewID","PaginatedHTMLView","DiscoveryDataHandler","dbURI","dbmethod","dburl","paths","build_paths","query","XHROpts","resetXHROpts","results","parameter","value","operator","Parameter","term","limit","offset","async","method","traditional","crossOrigin","error","xhrError","success","xhrResultsHandler","opt","setXHROpt","makeURL","filtered_items","path","retrieve","console","log","self","ajax","extend","data","xhr","ajaxOptions","thrownError","textStatus","jqXHR","items","list","item","item_metadata","find_by_metadata","filtered_collections","collection","DSpaceDataHandler","expansion","filters","fields","push","name","setQueryParameter","setAdditionalParameter","collectionID","join","filter","expandQuery","item_bitstreams","bitstreams","item_policy","content","schemas","field","Discovery","ECommonsOntarioDiscovery","vars","controller","view","document","ready","discovery","addSearchTerm","includeMetaData","performQuery","getResults","jQuery"],"mappings":"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","file":"find.js","sourcesContent":["/* jshint latedef:nofunc */\r\n//needed for function hoisting for build \r\n\r\n(function($) {\r\n    \r\n    class DiscoveryController {\r\n      constructor() {\r\n      \r\n      }  \r\n    }\r\n    \r\n    class DiscoveryView {\r\n      contructor() {\r\n        \r\n      }\r\n    }\r\n        \r\n    class HTMLUIController extends DiscoveryController {\r\n      constructor(controllerID) {\r\n        super();\r\n        this.id = $(controllerID);\r\n        \r\n      }\r\n    }\r\n    \r\n    class HTMLView extends DiscoveryView {\r\n      constructor(viewID) {\r\n        super();\r\n        this.id = $(viewID);\r\n        \r\n      }\r\n    }\r\n    \r\n    class PaginatedHTMLView extends DiscoveryView {\r\n      constructor() {\r\n        super();\r\n        \r\n      }\r\n    }\r\n    \r\n    /* !DATA HANDLER */\r\n    \r\n    class DiscoveryDataHandler {\r\n      constructor(dbURI, dbmethod) {\r\n        this.dburl = dbmethod + '://' + dbURI;\r\n        this.paths = this.build_paths();\r\n        this.query = {};\r\n        this.XHROpts = this.resetXHROpts();\r\n        this.results = {};\r\n                \r\n      }\r\n      \r\n      resetQueryParameters() {\r\n        this.query = {};\r\n      }\r\n  \r\n      // Placeholder. Will be particualar to database implementation. \r\n      \r\n      setQueryParameter(parameter,value,operator='like') {\r\n        this.query[Parameter] = value;\r\n        return this;  \r\n      }\r\n      \r\n      // Placeholder. Will be particular to database implementation\r\n      \r\n      addSearchTerm(term,operator='contains') {\r\n        return this;\r\n      }\r\n      \r\n      // Placeholder. Will be particualar to database implementation. \r\n      \r\n      setLimit(limit,offset) {\r\n        return this;\r\n      }      \r\n      \r\n      // A wrapper for the query Parameter\r\n      \r\n      getQuery() {\r\n        return this.query;\r\n      }\r\n      \r\n      // Sets default options for the AJAX call.\r\n      \r\n      resetXHROpts() {\r\n        this.XHROpts = {\r\n          async: false,\r\n          method: \"GET\", // default\r\n          traditional: true,\r\n          crossOrigin: true,\r\n          error: this.xhrError,\r\n          success: this.xhrResultsHandler\r\n        };\r\n      }\r\n      \r\n      // Set AJAX option as per http://api.jquery.com/jquery.ajax/\r\n      \r\n      setXHROpt(opt,value) {\r\n        this.XHROpts[opt] = value;\r\n        return this;\r\n      }\r\n      \r\n      // Wrapper that returns AJAX options\r\n      \r\n      getXHROpts() {\r\n        return this.XHROpts;\r\n      }\r\n      \r\n      // Performs filtered query\r\n      \r\n      performQuery() {\r\n        this.resetXHROpts();\r\n        this\r\n          .setXHROpt('url',this.makeURL(this.paths.query.filtered_items.path))\r\n          .setXHROpt('method',this.paths.query.filtered_items.method)\r\n          .setXHROpt('data',this.query);  \r\n        this.retrieve(); \r\n        return this;     \r\n      }\r\n      \r\n      getResults() {\r\n        console.log('get results');\r\n        console.log(this.results);\r\n        return this.results;\r\n      }\r\n      \r\n      makeURL(path) {\r\n        return this.dburl + \"/\" + path;\r\n      }\r\n      \r\n      /* ! -- AJAX call */\r\n      \r\n      /*\r\n        A number of things are going on here. The data results need to be scoped to the object instance so the success\r\n        a function expression was needed. The $.extend method allows us to do this and retain our this.XHROpts property.\r\n        The success parameter is passed an array, which calls a second method for post-processing.\r\n      */ \r\n                \r\n        \r\n      retrieve() {\r\n        var self = this;\r\n        $.ajax($.extend(this.XHROpts,{success: [function(data) { self.results = data},self.xhrResultsHandler]}));\r\n      }\r\n      \r\n      xhrError(xhr, ajaxOptions, thrownError) {\r\n        console.log('error');\r\n        console.log(xhr);\r\n        console.log(thrownError);\r\n      }\r\n      \r\n      // called after a successful ajax request \r\n      \r\n      xhrResultsHandler(data,textStatus,jqXHR) {\r\n      \r\n      }\r\n      \r\n      // see DSpace Handler for an extended implementation\r\n      \r\n      build_paths() {\r\n        return {\r\n          items: {\r\n            list: {                              // Returns a list of items\r\n              method: \"GET\",\r\n              path:     \"[path]\", \r\n              },                              \r\n            item: {                               // Returns a single item with ID %%\r\n              method: \"GET\",\r\n              path:     \"[path]/%%\"\r\n              },                           \r\n            item_metadata: {                      // Returns metadata for item %%\r\n              method: \"GET\",\r\n              path:     \"[path]/%%/[key]\",  \r\n              },       \r\n            find_by_metadata: {                   // Returns items based on specified metadata value\r\n              method: \"POST\",\r\n              path:     \"[path]\"\r\n            }     \r\n          },\r\n          query: {  \r\n            filtered_items: {                     // Returns items based on chosen filters\r\n              method: \"GET\",\r\n              path:     \"[path]\",  \r\n              },           \r\n            filtered_collections: {               // Returns collections based on chosen filters\r\n              method: \"GET\",\r\n              path:     \"[path]\",\r\n              }, \r\n            collection: {                         // Returns collection with ID %%\r\n              method: \"GET\",\r\n              path:     \"[path]/%%\",\r\n              }         \r\n          }\r\n        };\r\n      }\r\n    }\r\n    \r\n    /* !DSPACE HANDLER */\r\n    \r\n    class DSpaceDataHandler extends DiscoveryDataHandler {\r\n      constructor(dbURI, dbmethod) {\r\n        super(dbURI, dbmethod);\r\n        this.query = [];\r\n        this.expansion = []; // expands the dataset\r\n        this.filters = [];  // adds filters\r\n        this.fields = []; // fields to show\r\n      }\r\n      \r\n      resetQueryParameters() {\r\n        this.query = [];\r\n      }\r\n  \r\n      /* Available operators:\r\n        \r\n        exists\r\n        doesnt_exist\r\n        equals\r\n        not_equals\r\n        like\r\n        not_like\r\n        contains\r\n        doesnt_contain\r\n        matches\r\n        doesnt_match\r\n      */\r\n\r\n      \r\n      setQueryParameter(parameter,value,operator='like') {\r\n        \r\n        this.query.push({\r\n          name:   \"query_field[]\",\r\n          value:  parameter\r\n        });\r\n        \r\n        this.query.push({\r\n          name:   \"query_op[]\",\r\n          value:  operator\r\n        });\r\n        \r\n        this.query.push({\r\n          name:   \"query_val[]\",\r\n          value:  value\r\n        });\r\n        \r\n        return this;  \r\n      }\r\n      \r\n      // A search term is general across all metadata\r\n      \r\n      addSearchTerm(value,operator='contains') {\r\n        this.setQueryParameter('*',value,operator);\r\n        return this;\r\n      }\r\n      \r\n      setAdditionalParameter(parameter,value) {\r\n        this.query.push({\r\n          name: parameter,\r\n          value: value\r\n          });\r\n        return this;\r\n      }\r\n      \r\n      // Rudimentary. Will be particualar to database implementation. \r\n      \r\n      setLimit(limit=100,offset=0) {\r\n        this\r\n          .setAdditionalParameter('limit',limit)\r\n          .setAdditionalParameter('offset',offset);\r\n        return this;\r\n      }\r\n      \r\n      setCollection(collectionID) {\r\n        this.setAdditionalParameter('collSel[]',collectionID);\r\n        return this;\r\n      }\r\n      \r\n      /*  Expands the returned dataset. \r\n        \r\n          Some values:\r\n            metadata\r\n            bitstreams\r\n            parentCollection\r\n            parentCollectionList\r\n            parentCommunityList\r\n      */\r\n            \r\n      expandQuery(expansion) {\r\n        this.expansion.push(expansion);\r\n        this.setAdditionalParameter('expand',this.expansion.join(','));\r\n        return this;\r\n      }\r\n      \r\n      // Filters the dataset. Exanmples include 'is_withdrawn' or 'is_discoverable'\r\n      \r\n      filterQuery(filter) {\r\n        this.filters.push(filter);\r\n        this.setAdditionalParameter('expand',this.filters.join(','));\r\n        return this;\r\n      }\r\n      \r\n      // A shortcut to include metadata in results\r\n      \r\n      includeMetaData() {\r\n        this.expandQuery('metadata');\r\n        return this;\r\n      }\r\n      \r\n      // A shortcut to include bitstreams in results\r\n      \r\n      includeBitstreams() {\r\n        this.expandQuery('bitstreams');\r\n        return this;\r\n      }\r\n            \r\n      // Builds DSpace-specific paths\r\n      // TO DO: Build this into a common schema for all storage devices\r\n      \r\n      build_paths() {\r\n        return {\r\n          items: {\r\n            list: {                              // Returns a list of items\r\n              method: \"GET\",\r\n              path:     \"items\", \r\n              },                              \r\n            item: {                               // Returns a single item with ID %%\r\n              method: \"GET\",\r\n              path:     \"items/%%\"\r\n              },                           \r\n            item_metadata: {                      // Returns metadata for item %%\r\n              method: \"GET\",\r\n              path:     \"items/%%/metadata\",  \r\n              },       \r\n            item_bitstreams: {                    // Returns available bitstreams for item %%\r\n              method: \"GET\",\r\n              path:     \"items/%%/bitstreams\"  \r\n              },\r\n            find_by_metadata: {                   // Returns items based on specified metadata value\r\n              method: \"POST\",\r\n              path:     \"items/find-by-metadata-field\"\r\n            }     \r\n          },\r\n          query: {  \r\n            filtered_items: {                     // Returns items based on chosen filters\r\n              method: \"GET\",\r\n              path:     \"filtered-items\",  \r\n              },           \r\n            filtered_collections: {               // Returns collections based on chosen filters\r\n              method: \"GET\",\r\n              path:     \"filtered-collections\",\r\n              }, \r\n            collection: {                         // Returns collection with ID %%\r\n              method: \"GET\",\r\n              path:     \"filtered-collections/%%\",\r\n              }         \r\n          },\r\n          bitstreams: { \r\n            list: {                                // Returns all bitstreams in DSpace\r\n              method: \"GET\",\r\n              path:     \"bitsreams\"\r\n            },\r\n            item: {                               // Returns an item with bitstream ID %%\r\n              method: \"GET\",\r\n              path:     \"bitstreams/{%%}\"\r\n            },\r\n            item_policy: {                        // Returns the policy for a bitstream with ID %%\r\n              method: \"GET\",\r\n              path:     \"bitstreams/%%/policy\"\r\n            },\r\n            content: {                             // Retrieve content for a bitstream with ID %%\r\n              method:  \"GET\",\r\n              path:      \"bitstreams/%%/retrieve\"\r\n            }\r\n          },\r\n          schemas: {\r\n            list: {                        // Returns a list of all schemas\r\n              method: \"GET\",\r\n              path:     \"registries/schema\"\r\n            },\r\n            item: {                             // Returns a metadata schema with schema prefix %%\r\n              method: \"GET\",\r\n              path:     \"registries/schema/%%\"\r\n            },\r\n            field: {                              // Returns a metadata schema with field ID %%\r\n              method: \"GET\",\r\n              path:     \"registries/metadata-fields/%%\"\r\n            }\r\n          }\r\n        };\r\n      }\r\n      \r\n    }\r\n    \r\n    class Discovery {\r\n      constructor() {\r\n        // this.controller = new DiscoveryController();\r\n        // this.view = new DiscoveryView();\r\n        // this.DataHandler = new DiscoveryDataHandler();\r\n      }\r\n    }\r\n    \r\n    /* !ECO DISCOVERY CLASS */\r\n    /*\r\n      vars expects:\r\n      \r\n      {\r\n        controllerID: '#discovery-interface',\r\n        viewID:       '#results',\r\n        dbURI:        'books.spi.ryerson.ca/rest',\r\n        dbmethod:   'https'\r\n      }\r\n      \r\n    */\r\n    \r\n    class ECommonsOntarioDiscovery extends Discovery {\r\n      constructor(vars) {\r\n        super();\r\n        this.controller = new HTMLUIController(vars.controllerID);\r\n        this.view = new PaginatedHTMLView(vars.viewID);\r\n        this.data = new DSpaceDataHandler(vars.dbURI, vars.dbmethod);\r\n        \r\n      }\r\n    }\r\n    \r\n    \r\n    /* !DOCUMENT READY */\r\n    \r\n    $(document).ready(function() {\r\n            \r\n      var discovery = new ECommonsOntarioDiscovery\r\n        ({\r\n          controllerID: '#discovery-interface',\r\n          viewID:       '#results',\r\n          dbURI:        'books.spi.ryerson.ca/rest',\r\n          dbmethod:     'https'\r\n        });\r\n      \r\n      var results = discovery.data.addSearchTerm('Electrical').includeMetaData().performQuery().getResults();\r\n      \r\n    });\r\n  \r\n    \r\n})(jQuery);\r\n\r\n\r\n\r\n"],"sourceRoot":"assets/scripts/"}