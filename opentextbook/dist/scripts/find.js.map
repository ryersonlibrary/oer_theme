{"version":3,"sources":["../assets/scripts/find.js"],"names":["$","DiscoveryController","discoveryObj","controller","queue","enqueue","controllerStateChange","CriteriaSelectionController","facets","PaginationController","HTMLPaginationController","paginator","nextbtn","find","prevbtn","pagebtns","pageIndicator","html","currentPageIndicator","totalResultsIndicator","currentRangeIndicator","itemLimit","data","currentPage","initUI","resultsInfo","getResultInfo","nextPage","totalPages","viewPage","prevPage","page","attr","self","length","unbind","hide","bind","event","preventDefault","submit","show","previousPage","i","append","replaceAll","each","totalResults","start","end","push","op","values","HTMLSearchBox","HTMLCriteriaController","maxlistitems","setDefaultState","setAttribute","closest","facet","undefined","initfnc","ucfirst","itemcnt","showmore","item","toggleClass","removeAttr","siblings","morebtn","fewerbtn","css","addClass","fadeIn","fadeOut","animate","scrollTop","offset","top","input","val","keyCode","which","replace","split","DiscoveryView","items","HTMLView","view","stage","titleStage","templates","parseTemplates","twrapper","remove","template","processed","match","forEach","token","key","processTokens","book_capsule","ECommonsOntarioCriteriaController","ECommonsOntarioHTMLView","discoveryObject","DiscoveryDataHandler","dbURI","dbmethod","dburl","paths","build_paths","query","resultsComplete","XHROpts","resetXHROpts","results","expandedResults","parameter","value","operator","Parameter","term","limit","async","method","error","xhrError","Deferred","opt","prepareQuery","setXHROpt","makeURL","filtered_items","path","retrieve","when","done","Math","ceil","parseInt","ajax","extend","success","textStatus","jqXHR","xhrResultsHandler","processResults","resolve","xhr","ajaxOptions","thrownError","console","log","list","item_metadata","find_by_metadata","filtered_collections","collection","DSpaceDataHandler","resetQueryParameters","expansion","filters","fields","name","setQueryParameter","updateResultsInfo","uuid","subject","byline","title","metadata","j","md","prop","join","serializeDisplayString","subjects","output","replaceLast","setAdditionalParameter","collectionID","expansionValue","includes","filter","expandQuery","retrieveExpandedResults","url","item_bitstreams","bitstreams","item_policy","content","schemas","field","Discovery","dataOpQueue","controllers","label","resetDataOps","concat","execute","setItemLimit","map","trim","setDataOp","retrieveData","getResults","displayResults","updateControllers","updateController","resetDataParameters","apply","executeQuery","setItems","displayQueryResults","ECommonsOntarioDiscovery","vars","registerController","inboundState","getUrlParameter","decodeURIComponent","criteriaController","reset","includeMetaData","document","ready","discovery","jQuery","String","prototype","charAt","toUpperCase","slice","search","replacement","target","RegExp","index","lastIndexOf","substring","toString","sParam","sPageURL","window","location","sURLVariables","sParameterName"],"mappings":"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","file":"find.js","sourcesContent":["/* jshint latedef:nofunc */\n//needed for function hoisting for build \n\n(function($) {\n  \n    /* !DISCOVERY CONTROLLER CLASS */\n    \n    // Core Controller Class\n    \n    class DiscoveryController {\n      constructor(discoveryObj) {\n        this.discoveryObj = discoveryObj;\n        this.controller = null;\n        this.queue = [];\n      }  \n      \n      // To be called when results return from the data handler. Used to update results-dependent control devices such as paginators.\n      \n      updateController() {\n        \n      }\n      \n      // The controller is responsible for adding Data Class operators and values to the this.queue array, using the following form:\n      // { op: 'dataOpName', value: [list,of,op,arguments] }\n      \n      enqueue() {\n        \n      }\n      \n      // Submit enqueues and activates a controller state change in the main Disocvery object. \n      // If you want to manually retrieive values just enqueue the controller (listing its ops)\n      \n      // Reset should reset the controller to its default options.\n      \n      reset() {\n        \n      }\n            \n      submit() {\n        this.enqueue();\n        this.discoveryObj.controllerStateChange();\n      }\n      \n    }\n    \n    // Manages UIs that submit filter criteria.\n    \n    /* !CRITERIA SELECTION CONTROLLER CLASS */\n    \n    class CriteriaSelectionController extends DiscoveryController {\n      constructor(discoveryObj) {\n        super(discoveryObj);\n        this.facets = null;\n      }\n      \n      updateController() {\n        super.updateController();\n      }\n      \n      enqueue() {\n        super.enqueue();\n      }\n      \n      submit() {\n        super.submit();\n      }\n      \n    }\n    \n    /* !PAGINATION CONTROLLER CLASS */\n    // Manages Pagination UIs.\n    \n    class PaginationController extends DiscoveryController {\n      constructor(discoveryObj) {\n        super(discoveryObj);\n      }\n      \n      updateController() {\n        super.updateController();\n      }\n      \n      initUI() {\n        \n      }\n      \n      enqueue()  {\n        super.enqueue();\n      }\n      \n      submit() {\n        super.submit();\n      }\n    }\n    \n    /* !HTML PAGINATION CONTROLLER CLASS */\n    \n    // Manages HTML5-Based Pagination UIs\n    class HTMLPaginationController extends PaginationController {\n      constructor(discoveryObj) {\n        super(discoveryObj);\n        \n        // Components\n        this.discoveryObj = discoveryObj;\n        this.paginator = $('[data-controller-paginator]');\n        this.nextbtn = this.paginator.find('[data-controller-next]');\n        this.prevbtn = this.paginator.find('[data-controller-previous]');\n        this.pagebtns = this.paginator.find('[data-controller-pagebtns]');\n        this.pageIndicator = this.pagebtns.html();\n        \n        this.currentPageIndicator = this.paginator.find('[data-controller-current-page]');\n        this.totalResultsIndicator = this.paginator.find('[data-controller-total-results]');\n        this.currentRangeIndicator = this.paginator.find('[data-controller-current-range]');\n        \n        // Settings\n        \n        this.itemLimit = this.paginator.data('controller-item-limit');\n        this.currentPage = this.paginator.data('controller-current-page');\n                        \n        this.initUI();\n      }\n      \n      nextPage() {\n        var resultsInfo = this.discoveryObj.data.getResultInfo();\n        var nextPage = (resultsInfo.currentPage + 1) > resultsInfo.totalPages ? 1 : (resultsInfo.currentPage + 1);\n        this.viewPage(nextPage);\n      }\n      \n      previousPage() {\n        var resultsInfo = this.discoveryObj.data.getResultInfo();\n        var prevPage = (resultsInfo.currentPage - 1) === 0 ? resultsInfo.totalPages : (resultsInfo.currentPage - 1);\n        this.viewPage(prevPage);\n      }\n            \n      viewPage(page) {        \n        var resultsInfo = this.discoveryObj.data.getResultInfo();\n        this.paginator.attr('data-controller-current-page',page);\n      }\n      \n      updateController() {\n        this.initUI();\n      }\n      \n      initUI() {\n        super.initUI();\n        \n        var self = this;\n        var resultsInfo = this.discoveryObj.data.getResultInfo();\n                        \n        // Resent click event handlers and hide control elements.        \n        \n        if (this.nextbtn.length > 0) {\n          this.nextbtn.unbind('click').hide();\n          \n          this.nextbtn.bind('click',function(event){\n            event.preventDefault();\n            self.nextPage();\n            self.submit();\n          });\n          \n          if (resultsInfo.currentPage < resultsInfo.totalPages) {\n            this.nextbtn.show();\n          } \n        }\n        \n        if(this.prevbtn.length > 0) {\n          this.prevbtn.unbind('click').hide();\n          \n          this.prevbtn.bind('click',function(event){\n            event.preventDefault();\n            self.previousPage();\n            self.submit();\n          });\n          \n          if (resultsInfo.currentPage > 1) {\n            this.prevbtn.show();\n          }   \n        \n        }\n        \n        this.pagebtns.hide();\n        this.pagebtns.html('');\n          \n        if (this.paginator.length > 0) {\n        \n          // Build paginators\n          \n          if (resultsInfo.totalPages > 0) {\n            for (var i=1;i<resultsInfo.totalPages+1;i++) {\n              this.pagebtns.append(this.pageIndicator.replaceAll('%%',i)); \n            }\n                        \n            this.pagebtns.find('[data-controller-pagebtn]').each(function(){\n              $(this).bind('click',function(event) {\n                event.preventDefault();\n                self.viewPage($(this).attr('data-pageref'));\n                self.submit();\n              });\n            });\n            \n            this.pagebtns.show();\n\n            \n            if (this.currentPageIndicator.length > 0) {\n              this.currentPageIndicator.html(resultsInfo.currentPage);\n            }\n            \n            if (this.totalResultsIndicator.length > 0) {\n              this.totalResultsIndicator.html(resultsInfo.totalResults);\n            }\n            \n            if (this.currentRangeIndicator.length > 0) {\n              var start = ((resultsInfo.currentPage-1) * resultsInfo.itemLimit) + 1;\n              var end = ((resultsInfo.currentPage-1) * resultsInfo.itemLimit) + resultsInfo.itemLimit;\n              end = end > resultsInfo.totalResults ? resultsInfo.totalResults : end;\n              this.currentRangeIndicator.html(start + \" – \" + end);\n            }\n            \n            this.paginator.show();\n          }\n        }        \n      }\n      \n      enqueue() {\n        this.queue = [];\n        this.queue.push(\n          {\n            op: 'setItemLimit',\n            values: [this.paginator.attr('data-controller-item-limit'),this.paginator.attr('data-controller-current-page')]\n          });          \n      }\n      \n      \n    }\n    \n    /* !HTML SEARCH BOX CLASS */\n    // Manages standalone Search Box UIs\n    \n    class HTMLSearchBox extends CriteriaSelectionController {\n      constructor(discoveryObj) {\n        super(discoveryObj);\n      }\n    }\n        \n    /* !HTMLUI CONTROLLER */\n        \n    class HTMLCriteriaController extends CriteriaSelectionController {\n      constructor(discoveryObj) {\n        super(discoveryObj);\n        this.controller = $(\"[data-widget='discovery-controller']\");\n        this.facets = this.controller.find(\"[data-facet]\");\n        \n        // Settings\n        this.maxlistitems = 10;\n        \n        // Init\n        this.setDefaultState();\n        this.initUI();\n        \n        \n      }\n      \n      // Finds any item marked 'data-default-value' and sets it for inclusion in the queue.\n      \n      setDefaultState() {\n        this.controller.find('[data-default-value]').each(function(){\n          $(this)[0].setAttribute('data-selected','');\n          $(this).closest('[data-facet]')[0].setAttribute('data-enqueue','');\n        });\n      }\n      \n      initUI() {\n        var self = this;\n        \n        /* \n           Allows us to define widget initialization methods based on the ui-type.\n           Methods are in the form init[ui-type], with ui-type capitalized.\n           \n           Initialization functions are responsible for the following:\n           - Binding the appropriate change event (e.g. a click for a list or change for a selection). \n           - Adding its parent facet to the query queue by assigning it a 'data-enqueue' attribute.\n           - Adding a 'data-selected' attribute to any selected item.\n           - Resetting the facet if a user selects an “all” or “none” value, indicated in the controller by a '*' data-value.\n           - Firing the controller’s submit method.\n           - Performing any UX event modifications (such as preventing default link behaviour on link lists).\n        */\n        \n        this.facets.each(function() {\n          var facet = $(this);\n          if (typeof facet.data('ui-type') === undefined) { return; }\n          var initfnc = \"init\" + facet.data('ui-type').ucfirst();\n          if (typeof self[initfnc] !== 'function') { return; }\n          self[initfnc](facet,self);\n        });\n      }\n                  \n      initList(facet,self) {\n        var itemcnt = 0;\n        var showmore = false;\n        facet.find('[data-user-input-wrapper]').find('li').each(function() {\n          $(this).bind('click',function(event) {\n            event.preventDefault();\n            var item = $(this);\n            item.toggleClass('selected');\n            if (item.data('value') === '*') {\n              facet.removeAttr('data-enqueue');\n              item.siblings('li').removeAttr('data-selected');\n            } else {\n              facet[0].setAttribute('data-enqueue',''); // Use native JS to set boolean attribute\n              item[0].setAttribute('data-selected',''); \n            }\n            self.submit();\n          });\n          \n          if (itemcnt++ > self.maxlistitems) {\n            $(this).hide();\n            showmore = true;\n          }\n        });  \n        \n        // UI Animation for showing and hiding long item lists\n        \n        if (showmore === true) {\n                    \n          var morebtn = $(\"<p data-controller-ui-showmore><a title='Show all items'>Show all items</a><p>\");\n          var fewerbtn = $(\"<p data-controller-ui-showfewer><a title='Show fewer items'>Show fewer items</a><p>\");\n          \n          morebtn\n            .css('cursor','pointer')\n            .addClass('showmore')\n            .bind('click',function(event) {\n              event.preventDefault();\n              facet.find('li:hidden').each(function(){\n                $(this).fadeIn(200);\n              });\n              $(this).hide();\n              facet.find('[data-controller-ui-showfewer]').fadeIn(200);\n            });\n            \n          fewerbtn\n            .css('cursor','pointer')\n            .css('display','none')\n            .addClass('showmore')\n            .bind('click',function(event) {\n              event.preventDefault();\n              var i=0;\n              facet.find('li').each(function(){\n                if (i++ > self.maxlistitems) {\n                  $(this).fadeOut(200);\n                }\n              });\n              $(this).hide();\n              facet.find('[data-controller-ui-showmore]').fadeIn(200);\n              $('html, body').animate({\n                  scrollTop: self.controller.offset().top\n              }, 800);\n            });\n          \n          facet.append([morebtn,fewerbtn]); \n          \n        }      \n      }\n      \n      initTextfield(facet,self) {\n        facet.find('[data-user-input]').each(function() {\n          $(this).bind('keypress',function(event) {\n            var input = $(this);\n            if(input.val().length > 2) { // Don’t submit if there are less than three characters in the text field\n              facet[0].setAttribute('data-enqueue',''); // Use native JS to set boolean attribute\n              input[0].setAttribute('data-selected','');\n              input.attr('data-value',input.val());\n              self.submit();\n            } else {\n              facet.removeAttr('data-enqueue');\n              input.removeAttr('data-selected');\n            }\n          })\n          .bind('keypress', function(event) { // intercepts return character which would otherwise \"submit\" the form\n            if ((event.keyCode ? event.keyCode : event.which) === 13) {\n              self.submit();\n              return false;\n            } else { \n              return true;\n            }\n          });\n        });\n      }   \n      \n      reset() {\n        this.controller.find('[data-enqueue]').each(function(){\n          $(this).removeAttr('data-enqueue');\n        });\n        \n        this.controller.find('[data-selected]').each(function(){\n          $(this).removeAttr('data-selected');\n        });\n      }\n      \n      /* \n          Adds a list of data retrieval objects to the queue. Data retrieval objects contain a\n          data op (corresponding to a method of the data object) and values corresponding to its\n          arguments.\n      */   \n      \n      enqueue() {\n        var self = this;\n        this.queue = [];\n        this.controller.find('[data-enqueue]').each(function() {\n          var facet = $(this);\n          var values = [];\n          facet.find('[data-selected]').each(function() {\n            self.queue.push(\n              {\n                op: facet.data('op'),\n                values: facet.data('param').replace('%%',$(this).attr('data-value')).split('|')\n              }\n            );\n          });\n          \n        });\n      }\n      \n      submit() {\n        super.submit();\n      }\n      \n      \n    }\n    \n    /* !DISCOVERY VIEW CLASS */\n    \n    class DiscoveryView {\n      contructor(discoveryObj) {\n        this.items = [];\n      }\n      \n      setItems(items) {\n        this.items = items;\n        return this;\n      }\n            \n      displayQueryResults() {\n\n      }\n    }\n    \n    \n    /* !HTML VIEW CLASS */\n    \n    \n    // Displays results on HTML5 Stage\n    \n    class HTMLView extends DiscoveryView {\n      constructor(discoveryObj) {\n        super(discoveryObj);\n        this.view = $('[data-view-results]');\n        this.stage = this.view.find('[data-view-stage]');\n        this.titleStage = this.view.find('[data-view-title-stage]');\n        this.templates = {};\n        this.parseTemplates();        \n      }\n      \n      // Finds templates in the DOM and adds them to the templates object.\n      // Templates are designated in the DOM by a [data-view-template-wrapper] boolean attribute.\n      // This script expects that each wrapper have [data-template-name], which will be used as\n      // an object property. The template block is then removed from the DOM.\n      \n      parseTemplates() {\n        var self = this;\n        var templates = this.view.find('[data-view-templates]');\n        templates.find('[data-view-template-wrapper]').each(function(){\n          var twrapper = $(this);\n          self.templates[twrapper.data('view-template-name')] = twrapper.html();\n        })\n        .remove();\n      }\n      \n      // Tokens are processed as follows:  \n      // %%DataKey%%\n      \n      processTokens(template,item) {\n        var processed = template;\n        template.match(/\\%\\%[^\\%]*\\%\\%/g).forEach(function(token) {\n          var key = token.replaceAll('%%','');\n          processed = processed.replaceAll(token,item.values[key]);\n        });\n        \n        return processed;\n      }\n      \n      displayQueryResults() {\n        var self = this;\n        self.stage.html('');\n        this.items.forEach(function(item) {\n          self.stage.append(self.processTokens(self.templates.book_capsule,item));\n        });\n      }\n    }\n    \n    // Displays controller particular to the ECommonsOntario site\n    \n    class ECommonsOntarioCriteriaController extends HTMLCriteriaController {\n      constructor(discoveryObj) {\n        super(discoveryObj);\n      }\n    }\n    \n    // Displays results particular to the ECommonsOntario site\n    \n    class ECommonsOntarioHTMLView extends HTMLView {\n      constructor(discoveryObject) {\n        super(discoveryObject);\n      }\n    }\n        \n    /* !DISCOVERY DATA HANDLER */\n    \n    class DiscoveryDataHandler {\n      constructor(dbURI, dbmethod) {\n        this.dburl = dbmethod + '://' + dbURI;\n        \n        this.paths = this.build_paths();\n        this.query = {};\n        this.resultsComplete = null;\n        this.XHROpts = this.resetXHROpts();\n        this.results = {};\n        this.itemLimit = 6;\n        this.currentPage = 0;\n        this.totalResults = 0;\n        this.totalPages = 0;\n        \n        this.expandedResults = {}; // results without limits\n      }\n            \n      resetQueryParameters() {\n        this.query = {};\n      }\n  \n      // Placeholder. Will be particualar to database implementation. \n      \n      setQueryParameter(parameter,value,operator='like') {\n        this.query[Parameter] = value;\n        return this;  \n      }\n      \n      // Placeholder. Will be particular to database implementation\n      \n      setSearchTerm(term,operator='matches') {\n        return this;\n      }      \n      // Placeholder. Will be particular to database implementation\n      \n      setDateIssed(value,operator='<') {\n        return this;\n      }\n      \n      // Placeholder. Will be particualar to database implementation. \n      \n      setItemLimit(limit,page) {\n        var offset = limit * (page - 1);\n        this.itemLimit = limit;\n        this.currentPage = page;\n        return this;\n      }      \n      \n      // A wrapper for the query Parameter\n      \n      getQuery() {\n        return this.query;\n      }\n      \n      // Sets default options for the AJAX call.\n      \n      resetXHROpts() {\n        this.XHROpts = {\n          async: true,\n          method: \"GET\", // default\n          //traditional: true,\n          //crossOrigin: true,\n          error: this.xhrError,\n        };\n        \n        this.resultsComplete= $.Deferred();\n      }\n      \n      // Set AJAX option as per http://api.jquery.com/jquery.ajax/\n      \n      setXHROpt(opt,value) {\n        this.XHROpts[opt] = value;\n        return this;\n      }\n      \n      // Wrapper that returns AJAX options\n      \n      getXHROpts() {\n        return this.XHROpts;\n      }\n      \n      // Performs filtered query\n      \n      executeQuery() {\n        this.resetXHROpts();\n        this.prepareQuery();\n        this\n          .setXHROpt('url',this.makeURL(this.paths.query.filtered_items.path))\n          .setXHROpt('method',this.paths.query.filtered_items.method)\n          .setXHROpt('data',this.query);  \n        this.retrieve(); \n        return this;     \n      }\n      \n      processResults() {\n        var self = this;\n        $.when(this.resultsComplete).done(function() {\n          \n        });\n      }\n      \n      // To be called after results are processed. Each data class must return a total result count outside of filter limits.\n      \n      updateResultsInfo(totalResults) {\n        this.totalResults = totalResults;\n        this.totalPages = Math.ceil(this.totalResults / this.itemLimit);\n      }\n      \n      // Returns a handy object with result resultsInfo. Useful for updating pagination controllers.\n      \n      getResultInfo() {\n        return {\n          itemLimit: parseInt(this.itemLimit),\n          totalResults: parseInt(this.totalResults),\n          currentPage: parseInt(this.currentPage),\n          totalPages: parseInt(this.totalPages)\n        };\n      }\n      \n      // A shortcut to the results. Can only be called when this.resultsComplete is resolved.\n      \n      getResults() {\n        return this.results;\n      }\n      \n      makeURL(path) {\n        return this.dburl + \"/\" + path;\n      }\n            \n      // Retrieves data from storage. On success it calls an xhrResultsHandler (which is passed data directly)\n      // and a processResults (which is handed no arguments and is intended to operate on this.results)\n                      \n      retrieve() {\n        var self = this;\n        $.ajax($.extend(this.XHROpts,\n          {\n            success: \n              function(data,textStatus,jqXHR) { \n                self.results = data; \n                self.xhrResultsHandler(data,textStatus,jqXHR,self);\n                self.processResults();\n                self.resultsComplete.resolve(); \n              },\n          }\n        ));\n      }\n      \n      \n      // Handles XHR Errors. This function must be explicity set as part of the $.ajax() parameters.\n      \n      xhrError(xhr, ajaxOptions, thrownError) {\n        console.log('error');\n        console.log(xhr);\n        console.log(thrownError);\n      }\n      \n      // called after a successful ajax request \n      // marks resultsComplete as resolve.\n      \n      xhrResultsHandler(data,textStatus,jqXHR,self) {\n      \n      }\n      \n      // see DSpace Handler for an extended implementation\n      \n      build_paths() {\n        return {\n          items: {\n            list: {                              // Returns a list of items\n              method: \"GET\",\n              path:     \"[path]\", \n              },                              \n            item: {                               // Returns a single item with ID %%\n              method: \"GET\",\n              path:     \"[path]/%%\"\n              },                           \n            item_metadata: {                      // Returns metadata for item %%\n              method: \"GET\",\n              path:     \"[path]/%%/[key]\",  \n              },       \n            find_by_metadata: {                   // Returns items based on specified metadata value\n              method: \"POST\",\n              path:     \"[path]\"\n            }     \n          },\n          query: {  \n            filtered_items: {                     // Returns items based on chosen filters\n              method: \"GET\",\n              path:     \"[path]\",  \n              },           \n            filtered_collections: {               // Returns collections based on chosen filters\n              method: \"GET\",\n              path:     \"[path]\",\n              }, \n            collection: {                         // Returns collection with ID %%\n              method: \"GET\",\n              path:     \"[path]/%%\",\n              }         \n          }\n        };\n      }\n    }\n    \n    /* !DSPACE DATA HANDLER */\n    \n    class DSpaceDataHandler extends DiscoveryDataHandler {\n      constructor(dbURI, dbmethod) {\n        super(dbURI, dbmethod);\n        this.resetQueryParameters();\n      }\n      \n      resetQueryParameters() {\n        this.query = [];\n        this.expansion = []; // expands the dataset\n        this.filters = [];  // adds filters\n        this.fields = []; // fields to show\n      }\n  \n      /* \n        \n        Available operators:\n        \n        exists\n        doesnt_exist\n        equals\n        not_equals\n        like\n        not_like\n        contains\n        doesnt_contain\n        matches\n        doesnt_match\n    \n      */\n\n      setQueryParameter(parameter,value,operator='like') {\n        \n        this.query.push({\n          name:   \"query_field[]\",\n          value:  parameter\n        });\n        \n        this.query.push({\n          name:   \"query_op[]\",\n          value:  operator\n        });\n        \n        this.query.push({\n          name:   \"query_val[]\",\n          value:  value\n        });\n        \n        return this;  \n      }\n      \n      // Handles any special processing\n      \n      prepareQuery() {\n\n      }\n      \n      // A search term is general across all metadata\n      // Note: the “matches” operator alongside framing wildcards (“*value*”) returns a general case-insensitive result.\n      \n      setSearchTerm(value,operator='matches') {\n        this.setQueryParameter('*','(?i).*' + value + '*',operator);\n        return this;\n      }\n      \n      // called after a successful ajax request \n      \n      xhrResultsHandler(data,textStatus,jqXHR) {\n        super.xhrResultsHandler(data,textStatus,jqXHR);\n        if (typeof this.results.items === 'undefined') {\n          this.results.items = [];\n        }\n      }\n      \n      processResults() {\n        super.processResults();\n        var self = this;\n                \n        if (typeof self.expandedResults['unfiltered-item-count'] !== \"undefined\") {\n          self.updateResultsInfo(self.expandedResults['unfiltered-item-count']);\n        }\n        \n        for(var i=0; i<self.results.items.length; i++) {\n          var item = self.results.items[i];\n          \n          // Set default values.\n                  \n          var values = {\n            uuid: item.uuid,\n            subject: '',\n            byline: '',\n            title: ''\n          };\n          \n          if (typeof item.metadata !== \"undefined\") {\n            for(var j=0; j<item.metadata.length; j++) {\n              var md = item.metadata[j];\n              var key = md.key;\n              if (typeof values[key] === \"undefined\") {\n                values[key] = [];\n              }\n              values[key].push(md.value);\n            }\n          }\n          \n          // Join multiple values as single string\n          \n          for(var prop in values) {\n            if (values[prop] === \"undefined\" || typeof values[prop] !== 'object') {\n              values[prop] = '';\n            } else {\n              values[prop] = values[prop].join('%%');\n            }\n          }\n                      \n          // Process contributors\n          values.byline = self.serializeDisplayString(values,'dc.contributor.author');\n          values.subjects = self.serializeDisplayString(values,'dc.subject');\n          \n          self.results.items[i].values = values;\n        }\n      }\n      \n      serializeDisplayString(values,key) {\n        var output = '';\n        \n        if (typeof values[key] !== \"undefined\") {\n          output = values[key].replaceAll('%%',', ');\n          output = output.replaceLast(',',' and');\n        }\n        \n        return output;\n      }\n      \n      setAdditionalParameter(parameter,value) {\n        this.query.push({\n          name: parameter,\n          value: value\n          });\n        return this;\n      }\n      \n      // TO DO\n      \n      setDateIssed(term,operator='<') {\n        return this;\n      }\n            \n      setItemLimit(limit=6,page=1) {\n        super.setItemLimit(limit,page);\n        var offset= limit * (page - 1);\n        this\n          .setAdditionalParameter('limit',limit)\n          .setAdditionalParameter('offset',offset);\n        return this;\n      }\n      \n      setCollection(collectionID) {\n        this.setAdditionalParameter('collSel[]',collectionID);\n        return this;\n      }\n      \n      /*  Expands the returned dataset. \n        \n          Some values:\n            metadata\n            bitstreams\n            parentCollection\n            parentCollectionList\n            parentCommunityList\n      */\n            \n      expandQuery(expansionValue) {\n        if (this.expansion.includes(expansionValue) === false) {\n          this.expansion.push(expansionValue);\n          this.setAdditionalParameter('expand',this.expansion.join(','));\n        }\n        return this;\n      }\n      \n      // Filters the dataset. Exanmples include 'is_withdrawn' or 'is_discoverable'\n      \n      filterQuery(filter) {\n        this.filters.push(filter);\n        this.setAdditionalParameter('expand',this.filters.join(','));\n        return this;\n      }\n      \n      // A shortcut to include metadata in results\n      \n      includeMetaData() {\n        this.expandQuery('metadata');\n        return this;\n      }\n      \n      // A shortcut to include bitstreams in results\n      \n      includeBitstreams() {\n        this.expandQuery('bitstreams');\n        return this;\n      }\n      \n      /* ! -- AJAX call */\n      // See “HACK” below for explanation. Need to eliminate this.\n      \n      retrieve() {\n        var self = this;\n        $.ajax($.extend(this.XHROpts,\n          {\n            success: \n              function(data,textStatus,jqXHR) { \n                self.results = data; \n                self.xhrResultsHandler(data,textStatus,jqXHR,self);\n                self.retrieveExpandedResults();\n              },\n          }\n        ));\n      }\n      \n      // HACK: Can't seem to find a way to retrieve both a paginated result and the total number of results without pagination.\n      // This total value is required to set up a proper pagination UI.\n      // One option would be to retrieve all results unpaginated and parse them on the client side. \n      // As of now we're querying twice to get the number of unfiltered items.\n      \n      retrieveExpandedResults() {\n        var self = this;\n                        \n        $.ajax({\n            method: \"GET\",\n            async: true,\n            url: this.makeURL(this.paths.query.filtered_items.path),\n            data: this.query.filter(function(item){\n              return (item.name === 'limit' || item.name === 'offset') !== true;\n            }),\n            success: \n              function(data,textStatus,jqXHR) { \n                self.expandedResults = data;\n                self.processResults();\n                self.resultsComplete.resolve(); \n              }\n            });\n      }\n\n            \n      // Builds DSpace-specific paths\n      // TO DO: Build this into a common schema for all storage devices\n      \n      build_paths() {\n        return {\n          items: {\n            list: {                              // Returns a list of items\n              method: \"GET\",\n              path:     \"items\", \n              },                              \n            item: {                               // Returns a single item with ID %%\n              method: \"GET\",\n              path:     \"items/%%\"\n              },                           \n            item_metadata: {                      // Returns metadata for item %%\n              method: \"GET\",\n              path:     \"items/%%/metadata\",  \n              },       \n            item_bitstreams: {                    // Returns available bitstreams for item %%\n              method: \"GET\",\n              path:     \"items/%%/bitstreams\"  \n              },\n            find_by_metadata: {                   // Returns items based on specified metadata value\n              method: \"POST\",\n              path:     \"items/find-by-metadata-field\"\n            }     \n          },\n          query: {  \n            filtered_items: {                     // Returns items based on chosen filters\n              method: \"GET\",\n              path:     \"filtered-items\",  \n              },           \n            filtered_collections: {               // Returns collections based on chosen filters\n              method: \"GET\",\n              path:     \"filtered-collections\",\n              }, \n            collection: {                         // Returns collection with ID %%\n              method: \"GET\",\n              path:     \"filtered-collections/%%\",\n              }         \n          },\n          bitstreams: { \n            list: {                               // Returns all bitstreams in DSpace\n              method: \"GET\",\n              path:     \"bitsreams\"\n            },\n            item: {                               // Returns an item with bitstream ID %%\n              method: \"GET\",\n              path:     \"bitstreams/{%%}\"\n            },\n            item_policy: {                        // Returns the policy for a bitstream with ID %%\n              method: \"GET\",\n              path:     \"bitstreams/%%/policy\"\n            },\n            content: {                             // Retrieve content for a bitstream with ID %%\n              method:  \"GET\",\n              path:      \"bitstreams/%%/retrieve\"\n            }\n          },\n          schemas: {\n            list: {                               // Returns a list of all schemas\n              method: \"GET\",\n              path:     \"registries/schema\"\n            },\n            item: {                               // Returns a metadata schema with schema prefix %%\n              method: \"GET\",\n              path:     \"registries/schema/%%\"\n            },\n            field: {                              // Returns a metadata schema with field ID %%\n              method: \"GET\",\n              path:     \"registries/metadata-fields/%%\"\n            }\n          }\n        };\n      }\n      \n    }\n    \n    /* !DISCOVERY CLASS */\n    \n    class Discovery {\n      constructor() {\n        this.dataOpQueue = [];\n        this.results = {};\n        this.items = [];\n        this.view = {};\n        this.controllers = {};\n\n        \n        /* Example:\n          this.view = new ECommonsOntarioHTMLView(this);\n          this.data = new DSpaceDataHandler(vars.dbURI, vars.dbmethod);\n        */\n      }\n      \n      registerController(label,controller) {\n        this.controllers[label] = controller;\n      }\n      \n      inboundState() {\n        \n      }\n            \n      // fired by Controller when it changes state.\n      // All controllers current op queues are reassembled.\n      \n      controllerStateChange() {\n        \n        this.resetDataOps();\n        \n        for (var controller in this.controllers) {\n          if (this.controllers[controller].queue.length > 0) {\n            this.dataOpQueue = this.dataOpQueue.concat(this.controllers[controller].queue);\n          }\n        }\n                        \n        this.execute();\n      }\n      \n      setItemLimit(limit,page) {\n        this.data.setItemLimit(limit,page);\n      }\n      \n      resetDataOps() {\n        this.dataOpQueue = [];\n      }\n            \n      setDataOp(op,values) {\n\n        // remove spaces from values\n                \n        values = values.map(function(val){\n          val = val.trim();\n          return val;\n        });\n        \n        this.dataOpQueue.push({\n          op: op,\n          values: values\n        });\n      }\n      \n      quickSearch(term) {\n        this.dataOpQueue = [];\n        this.setDataOp('setSearchTerm',[term]);\n        this.execute();\n      }\n            \n      // Clears data parameters\n      \n      resetDataParameters() {\n        this.data.resetQueryParameters();\n      }\n      \n      // retrieves and displays data\n      \n      execute() {\n        var self = this;\n        self.retrieveData();\n        $.when(this.data.resultsComplete).done(function(){\n          self.results = self.data.getResults();\n          self.items = typeof self.results.items !== \"undefined\" ? self.results.items : [];\n          self.displayResults();\n          self.updateControllers();\n          \n        });\n      }\n      \n      // Updates all registered controllers\n      \n      updateControllers() {\n        for(var controller in this.controllers) {\n          this.controllers[controller].updateController();\n        } \n      }\n      \n      // An Alias for reset Data Parameters\n      \n      newQuery() {\n         this.resetDataParameters();\n      }\n      \n      /* !-- Retrieve Data */\n\n      retrieveData() {\n        var self = this;\n        this.resetDataParameters();\n        this.dataOpQueue.forEach(function(item){\n          self.data[item.op].apply(self.data,item.values);\n        });\n        self.data.executeQuery();\n        return this;\n      }      \n      \n      // This function can only be called when this.data.resultsComplete has been resolved.\n      \n      displayResults() {\n        this.view\n          .setItems(this.items)\n          .displayQueryResults();\n      }\n    }\n    \n    /* !ECO DISCOVERY CLASS */\n    /*\n      vars expects:\n      \n      {\n        dbURI:      'books.spi.ryerson.ca/rest',\n        dbmethod:   'https'\n      }\n      \n    */\n    \n    class ECommonsOntarioDiscovery extends Discovery {\n      constructor(vars) {\n        super();\n        this.data = new DSpaceDataHandler(vars.dbURI, vars.dbmethod);\n        this.view = new ECommonsOntarioHTMLView(this);\n        \n        // TO DO: There could be auto-discovery here\n        \n        this.registerController('criteriaController',new ECommonsOntarioCriteriaController(this));\n        this.registerController('paginationController', new HTMLPaginationController(this));\n        \n        this.inboundState();\n      }\n      \n      /* !--Initial State of Application */\n      \n      // Right now only accepts search parameters\n      \n      inboundState() {\n        var op = getUrlParameter('op');\n        var value = decodeURIComponent(getUrlParameter('value'));\n  \n        if (op === 'setSearchTerm') {\n          this.controller.criteriaController.reset();\n          $('#search-value').val(value);\n        }\n        \n        \n        for(var controller in this.controllers) {\n\n          this.controllers[controller].enqueue();\n        }\n        \n        // Executes the initial state of the controllers.\n        \n        this.controllerStateChange();\n        \n      }\n      \n      setItemLimit(limit,page) {\n        super.setItemLimit(limit,page);\n      }\n      \n      resetDataParameters() {\n        super.resetDataParameters();\n        this.data.includeMetaData();\n      }\n      \n    }\n    \n    /* !DOCUMENT READY */\n    \n    $(document).ready(function() {\n            \n      var discovery = new ECommonsOntarioDiscovery\n        ({\n          dbURI:        'dsweb.semiprodint.ryerson.ca/rest',\n          dbmethod:     'http'\n        });\n      \n      // var results = discovery.data.setSearchTerm('Electrical').includeMetaData().executeQuery().getResults();\n      \n    });\n  \n})(jQuery);\n\n// Functions like PHP’s ucfirst()\n\nString.prototype.ucfirst = function() {\n  return this.charAt(0).toUpperCase() + this.slice(1);\n};\n\n// Replaces all instances of a string\n\nString.prototype.replaceAll = function(search, replacement) {\n  var target = this;\n  return target.replace(new RegExp(search, 'g'), replacement);\n};\n\nString.prototype.replaceLast = function(find, replace) {\n  var index = this.lastIndexOf(find);\n\n  if (index >= 0) {\n      return this.substring(0, index) + replace + this.substring(index + find.length);\n  }\n\n  return this.toString();\n};\n\n// With thanks to http://www.jquerybyexample.net/2012/06/get-url-parameters-using-jquery.html\n\nfunction getUrlParameter (sParam) {\n    var sPageURL = decodeURIComponent(window.location.search.substring(1)),\n    sURLVariables = sPageURL.split('&'),\n    sParameterName,\n    i;\n\n  for (i = 0; i < sURLVariables.length; i++) {\n    sParameterName = sURLVariables[i].split('=');\n\n    if (sParameterName[0] === sParam) {\n        return sParameterName[1] === undefined ? true : sParameterName[1];\n    }\n  }\n}\n\n\n"],"sourceRoot":"assets/scripts/"}